
rfinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00002e28  00002ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080018c  0080018c  00002fe8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000316  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4d  00000000  00000000  0000331e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  00003d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012b6  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00005204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00005484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_1>
       8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 0c 	call	0x1900	; 0x1900 <main>
      8a:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_port_config>:
void lcd_line1();
void lcd_line2();
void lcd_string(char*);

void lcd_port_config (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
      9a:	a4 e3       	ldi	r26, 0x34	; 52
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e4 e3       	ldi	r30, 0x34	; 52
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	87 6f       	ori	r24, 0xF7	; 247
      a6:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
      a8:	a5 e3       	ldi	r26, 0x35	; 53
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e5 e3       	ldi	r30, 0x35	; 53
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	80 78       	andi	r24, 0x80	; 128
      b4:	8c 93       	st	X, r24
}
      b6:	cf 91       	pop	r28
      b8:	df 91       	pop	r29
      ba:	08 95       	ret

000000bc <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	df 93       	push	r29
      c2:	cf 93       	push	r28
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	c0 57       	subi	r28, 0x70	; 112
      ca:	d0 40       	sbci	r29, 0x00	; 0
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	fe 01       	movw	r30, r28
      d8:	e3 59       	subi	r30, 0x93	; 147
      da:	ff 4f       	sbci	r31, 0xFF	; 255
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	a0 e8       	ldi	r26, 0x80	; 128
      e2:	bf e3       	ldi	r27, 0x3F	; 63
      e4:	80 83       	st	Z, r24
      e6:	91 83       	std	Z+1, r25	; 0x01
      e8:	a2 83       	std	Z+2, r26	; 0x02
      ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      ec:	8e 01       	movw	r16, r28
      ee:	07 59       	subi	r16, 0x97	; 151
      f0:	1f 4f       	sbci	r17, 0xFF	; 255
      f2:	fe 01       	movw	r30, r28
      f4:	e3 59       	subi	r30, 0x93	; 147
      f6:	ff 4f       	sbci	r31, 0xFF	; 255
      f8:	60 81       	ld	r22, Z
      fa:	71 81       	ldd	r23, Z+1	; 0x01
      fc:	82 81       	ldd	r24, Z+2	; 0x02
      fe:	93 81       	ldd	r25, Z+3	; 0x03
     100:	26 e6       	ldi	r18, 0x66	; 102
     102:	36 e6       	ldi	r19, 0x66	; 102
     104:	46 ee       	ldi	r20, 0xE6	; 230
     106:	54 e4       	ldi	r21, 0x44	; 68
     108:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     10c:	dc 01       	movw	r26, r24
     10e:	cb 01       	movw	r24, r22
     110:	f8 01       	movw	r30, r16
     112:	80 83       	st	Z, r24
     114:	91 83       	std	Z+1, r25	; 0x01
     116:	a2 83       	std	Z+2, r26	; 0x02
     118:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     11a:	fe 01       	movw	r30, r28
     11c:	e7 59       	subi	r30, 0x97	; 151
     11e:	ff 4f       	sbci	r31, 0xFF	; 255
     120:	60 81       	ld	r22, Z
     122:	71 81       	ldd	r23, Z+1	; 0x01
     124:	82 81       	ldd	r24, Z+2	; 0x02
     126:	93 81       	ldd	r25, Z+3	; 0x03
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e8       	ldi	r20, 0x80	; 128
     12e:	5f e3       	ldi	r21, 0x3F	; 63
     130:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     134:	88 23       	and	r24, r24
     136:	44 f4       	brge	.+16     	; 0x148 <lcd_set_4bit+0x8c>
		__ticks = 1;
     138:	fe 01       	movw	r30, r28
     13a:	e9 59       	subi	r30, 0x99	; 153
     13c:	ff 4f       	sbci	r31, 0xFF	; 255
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	91 83       	std	Z+1, r25	; 0x01
     144:	80 83       	st	Z, r24
     146:	64 c0       	rjmp	.+200    	; 0x210 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     148:	fe 01       	movw	r30, r28
     14a:	e7 59       	subi	r30, 0x97	; 151
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	60 81       	ld	r22, Z
     150:	71 81       	ldd	r23, Z+1	; 0x01
     152:	82 81       	ldd	r24, Z+2	; 0x02
     154:	93 81       	ldd	r25, Z+3	; 0x03
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	3f ef       	ldi	r19, 0xFF	; 255
     15a:	4f e7       	ldi	r20, 0x7F	; 127
     15c:	57 e4       	ldi	r21, 0x47	; 71
     15e:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     162:	18 16       	cp	r1, r24
     164:	0c f0       	brlt	.+2      	; 0x168 <lcd_set_4bit+0xac>
     166:	43 c0       	rjmp	.+134    	; 0x1ee <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     168:	fe 01       	movw	r30, r28
     16a:	e3 59       	subi	r30, 0x93	; 147
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	60 81       	ld	r22, Z
     170:	71 81       	ldd	r23, Z+1	; 0x01
     172:	82 81       	ldd	r24, Z+2	; 0x02
     174:	93 81       	ldd	r25, Z+3	; 0x03
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e2       	ldi	r20, 0x20	; 32
     17c:	51 e4       	ldi	r21, 0x41	; 65
     17e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     182:	dc 01       	movw	r26, r24
     184:	cb 01       	movw	r24, r22
     186:	8e 01       	movw	r16, r28
     188:	09 59       	subi	r16, 0x99	; 153
     18a:	1f 4f       	sbci	r17, 0xFF	; 255
     18c:	bc 01       	movw	r22, r24
     18e:	cd 01       	movw	r24, r26
     190:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     194:	dc 01       	movw	r26, r24
     196:	cb 01       	movw	r24, r22
     198:	f8 01       	movw	r30, r16
     19a:	91 83       	std	Z+1, r25	; 0x01
     19c:	80 83       	st	Z, r24
     19e:	1f c0       	rjmp	.+62     	; 0x1de <lcd_set_4bit+0x122>
     1a0:	fe 01       	movw	r30, r28
     1a2:	eb 59       	subi	r30, 0x9B	; 155
     1a4:	ff 4f       	sbci	r31, 0xFF	; 255
     1a6:	88 eb       	ldi	r24, 0xB8	; 184
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	91 83       	std	Z+1, r25	; 0x01
     1ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ae:	fe 01       	movw	r30, r28
     1b0:	eb 59       	subi	r30, 0x9B	; 155
     1b2:	ff 4f       	sbci	r31, 0xFF	; 255
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0xfc>
     1bc:	fe 01       	movw	r30, r28
     1be:	eb 59       	subi	r30, 0x9B	; 155
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	91 83       	std	Z+1, r25	; 0x01
     1c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c6:	de 01       	movw	r26, r28
     1c8:	a9 59       	subi	r26, 0x99	; 153
     1ca:	bf 4f       	sbci	r27, 0xFF	; 255
     1cc:	fe 01       	movw	r30, r28
     1ce:	e9 59       	subi	r30, 0x99	; 153
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	80 81       	ld	r24, Z
     1d4:	91 81       	ldd	r25, Z+1	; 0x01
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	11 96       	adiw	r26, 0x01	; 1
     1da:	9c 93       	st	X, r25
     1dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1de:	fe 01       	movw	r30, r28
     1e0:	e9 59       	subi	r30, 0x99	; 153
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	80 81       	ld	r24, Z
     1e6:	91 81       	ldd	r25, Z+1	; 0x01
     1e8:	00 97       	sbiw	r24, 0x00	; 0
     1ea:	d1 f6       	brne	.-76     	; 0x1a0 <lcd_set_4bit+0xe4>
     1ec:	27 c0       	rjmp	.+78     	; 0x23c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ee:	8e 01       	movw	r16, r28
     1f0:	09 59       	subi	r16, 0x99	; 153
     1f2:	1f 4f       	sbci	r17, 0xFF	; 255
     1f4:	fe 01       	movw	r30, r28
     1f6:	e7 59       	subi	r30, 0x97	; 151
     1f8:	ff 4f       	sbci	r31, 0xFF	; 255
     1fa:	60 81       	ld	r22, Z
     1fc:	71 81       	ldd	r23, Z+1	; 0x01
     1fe:	82 81       	ldd	r24, Z+2	; 0x02
     200:	93 81       	ldd	r25, Z+3	; 0x03
     202:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	f8 01       	movw	r30, r16
     20c:	91 83       	std	Z+1, r25	; 0x01
     20e:	80 83       	st	Z, r24
     210:	de 01       	movw	r26, r28
     212:	ad 59       	subi	r26, 0x9D	; 157
     214:	bf 4f       	sbci	r27, 0xFF	; 255
     216:	fe 01       	movw	r30, r28
     218:	e9 59       	subi	r30, 0x99	; 153
     21a:	ff 4f       	sbci	r31, 0xFF	; 255
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	8d 93       	st	X+, r24
     222:	9c 93       	st	X, r25
     224:	fe 01       	movw	r30, r28
     226:	ed 59       	subi	r30, 0x9D	; 157
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	80 81       	ld	r24, Z
     22c:	91 81       	ldd	r25, Z+1	; 0x01
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcd_set_4bit+0x172>
     232:	fe 01       	movw	r30, r28
     234:	ed 59       	subi	r30, 0x9D	; 157
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     23c:	a5 e3       	ldi	r26, 0x35	; 53
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e5 e3       	ldi	r30, 0x35	; 53
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8e 7f       	andi	r24, 0xFE	; 254
     248:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     24a:	a5 e3       	ldi	r26, 0x35	; 53
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	e5 e3       	ldi	r30, 0x35	; 53
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	8d 7f       	andi	r24, 0xFD	; 253
     256:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     258:	e5 e3       	ldi	r30, 0x35	; 53
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 e3       	ldi	r24, 0x30	; 48
     25e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     260:	a5 e3       	ldi	r26, 0x35	; 53
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e5 e3       	ldi	r30, 0x35	; 53
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	84 60       	ori	r24, 0x04	; 4
     26c:	8c 93       	st	X, r24
     26e:	fe 01       	movw	r30, r28
     270:	e1 5a       	subi	r30, 0xA1	; 161
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a0 ea       	ldi	r26, 0xA0	; 160
     27a:	b0 e4       	ldi	r27, 0x40	; 64
     27c:	80 83       	st	Z, r24
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	a2 83       	std	Z+2, r26	; 0x02
     282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     284:	8e 01       	movw	r16, r28
     286:	05 5a       	subi	r16, 0xA5	; 165
     288:	1f 4f       	sbci	r17, 0xFF	; 255
     28a:	fe 01       	movw	r30, r28
     28c:	e1 5a       	subi	r30, 0xA1	; 161
     28e:	ff 4f       	sbci	r31, 0xFF	; 255
     290:	60 81       	ld	r22, Z
     292:	71 81       	ldd	r23, Z+1	; 0x01
     294:	82 81       	ldd	r24, Z+2	; 0x02
     296:	93 81       	ldd	r25, Z+3	; 0x03
     298:	26 e6       	ldi	r18, 0x66	; 102
     29a:	36 e6       	ldi	r19, 0x66	; 102
     29c:	46 ee       	ldi	r20, 0xE6	; 230
     29e:	54 e4       	ldi	r21, 0x44	; 68
     2a0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	f8 01       	movw	r30, r16
     2aa:	80 83       	st	Z, r24
     2ac:	91 83       	std	Z+1, r25	; 0x01
     2ae:	a2 83       	std	Z+2, r26	; 0x02
     2b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2b2:	fe 01       	movw	r30, r28
     2b4:	e5 5a       	subi	r30, 0xA5	; 165
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	60 81       	ld	r22, Z
     2ba:	71 81       	ldd	r23, Z+1	; 0x01
     2bc:	82 81       	ldd	r24, Z+2	; 0x02
     2be:	93 81       	ldd	r25, Z+3	; 0x03
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e8       	ldi	r20, 0x80	; 128
     2c6:	5f e3       	ldi	r21, 0x3F	; 63
     2c8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     2cc:	88 23       	and	r24, r24
     2ce:	44 f4       	brge	.+16     	; 0x2e0 <lcd_set_4bit+0x224>
		__ticks = 1;
     2d0:	fe 01       	movw	r30, r28
     2d2:	e7 5a       	subi	r30, 0xA7	; 167
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	91 83       	std	Z+1, r25	; 0x01
     2dc:	80 83       	st	Z, r24
     2de:	64 c0       	rjmp	.+200    	; 0x3a8 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     2e0:	fe 01       	movw	r30, r28
     2e2:	e5 5a       	subi	r30, 0xA5	; 165
     2e4:	ff 4f       	sbci	r31, 0xFF	; 255
     2e6:	60 81       	ld	r22, Z
     2e8:	71 81       	ldd	r23, Z+1	; 0x01
     2ea:	82 81       	ldd	r24, Z+2	; 0x02
     2ec:	93 81       	ldd	r25, Z+3	; 0x03
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	3f ef       	ldi	r19, 0xFF	; 255
     2f2:	4f e7       	ldi	r20, 0x7F	; 127
     2f4:	57 e4       	ldi	r21, 0x47	; 71
     2f6:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     2fa:	18 16       	cp	r1, r24
     2fc:	0c f0       	brlt	.+2      	; 0x300 <lcd_set_4bit+0x244>
     2fe:	43 c0       	rjmp	.+134    	; 0x386 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	fe 01       	movw	r30, r28
     302:	e1 5a       	subi	r30, 0xA1	; 161
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	60 81       	ld	r22, Z
     308:	71 81       	ldd	r23, Z+1	; 0x01
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e2       	ldi	r20, 0x20	; 32
     314:	51 e4       	ldi	r21, 0x41	; 65
     316:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	8e 01       	movw	r16, r28
     320:	07 5a       	subi	r16, 0xA7	; 167
     322:	1f 4f       	sbci	r17, 0xFF	; 255
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	f8 01       	movw	r30, r16
     332:	91 83       	std	Z+1, r25	; 0x01
     334:	80 83       	st	Z, r24
     336:	1f c0       	rjmp	.+62     	; 0x376 <lcd_set_4bit+0x2ba>
     338:	fe 01       	movw	r30, r28
     33a:	e9 5a       	subi	r30, 0xA9	; 169
     33c:	ff 4f       	sbci	r31, 0xFF	; 255
     33e:	88 eb       	ldi	r24, 0xB8	; 184
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	91 83       	std	Z+1, r25	; 0x01
     344:	80 83       	st	Z, r24
     346:	fe 01       	movw	r30, r28
     348:	e9 5a       	subi	r30, 0xA9	; 169
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	80 81       	ld	r24, Z
     34e:	91 81       	ldd	r25, Z+1	; 0x01
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd_set_4bit+0x294>
     354:	fe 01       	movw	r30, r28
     356:	e9 5a       	subi	r30, 0xA9	; 169
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35e:	de 01       	movw	r26, r28
     360:	a7 5a       	subi	r26, 0xA7	; 167
     362:	bf 4f       	sbci	r27, 0xFF	; 255
     364:	fe 01       	movw	r30, r28
     366:	e7 5a       	subi	r30, 0xA7	; 167
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	11 96       	adiw	r26, 0x01	; 1
     372:	9c 93       	st	X, r25
     374:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     376:	fe 01       	movw	r30, r28
     378:	e7 5a       	subi	r30, 0xA7	; 167
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	d1 f6       	brne	.-76     	; 0x338 <lcd_set_4bit+0x27c>
     384:	27 c0       	rjmp	.+78     	; 0x3d4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     386:	8e 01       	movw	r16, r28
     388:	07 5a       	subi	r16, 0xA7	; 167
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	fe 01       	movw	r30, r28
     38e:	e5 5a       	subi	r30, 0xA5	; 165
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	60 81       	ld	r22, Z
     394:	71 81       	ldd	r23, Z+1	; 0x01
     396:	82 81       	ldd	r24, Z+2	; 0x02
     398:	93 81       	ldd	r25, Z+3	; 0x03
     39a:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     39e:	dc 01       	movw	r26, r24
     3a0:	cb 01       	movw	r24, r22
     3a2:	f8 01       	movw	r30, r16
     3a4:	91 83       	std	Z+1, r25	; 0x01
     3a6:	80 83       	st	Z, r24
     3a8:	de 01       	movw	r26, r28
     3aa:	ab 5a       	subi	r26, 0xAB	; 171
     3ac:	bf 4f       	sbci	r27, 0xFF	; 255
     3ae:	fe 01       	movw	r30, r28
     3b0:	e7 5a       	subi	r30, 0xA7	; 167
     3b2:	ff 4f       	sbci	r31, 0xFF	; 255
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	8d 93       	st	X+, r24
     3ba:	9c 93       	st	X, r25
     3bc:	fe 01       	movw	r30, r28
     3be:	eb 5a       	subi	r30, 0xAB	; 171
     3c0:	ff 4f       	sbci	r31, 0xFF	; 255
     3c2:	80 81       	ld	r24, Z
     3c4:	91 81       	ldd	r25, Z+1	; 0x01
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_set_4bit+0x30a>
     3ca:	fe 01       	movw	r30, r28
     3cc:	eb 5a       	subi	r30, 0xAB	; 171
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	91 83       	std	Z+1, r25	; 0x01
     3d2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3d4:	a5 e3       	ldi	r26, 0x35	; 53
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e5 e3       	ldi	r30, 0x35	; 53
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	8b 7f       	andi	r24, 0xFB	; 251
     3e0:	8c 93       	st	X, r24
     3e2:	fe 01       	movw	r30, r28
     3e4:	ef 5a       	subi	r30, 0xAF	; 175
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	a0 e8       	ldi	r26, 0x80	; 128
     3ee:	bf e3       	ldi	r27, 0x3F	; 63
     3f0:	80 83       	st	Z, r24
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	a2 83       	std	Z+2, r26	; 0x02
     3f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3f8:	8e 01       	movw	r16, r28
     3fa:	03 5b       	subi	r16, 0xB3	; 179
     3fc:	1f 4f       	sbci	r17, 0xFF	; 255
     3fe:	fe 01       	movw	r30, r28
     400:	ef 5a       	subi	r30, 0xAF	; 175
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	60 81       	ld	r22, Z
     406:	71 81       	ldd	r23, Z+1	; 0x01
     408:	82 81       	ldd	r24, Z+2	; 0x02
     40a:	93 81       	ldd	r25, Z+3	; 0x03
     40c:	26 e6       	ldi	r18, 0x66	; 102
     40e:	36 e6       	ldi	r19, 0x66	; 102
     410:	46 ee       	ldi	r20, 0xE6	; 230
     412:	54 e4       	ldi	r21, 0x44	; 68
     414:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	f8 01       	movw	r30, r16
     41e:	80 83       	st	Z, r24
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	a2 83       	std	Z+2, r26	; 0x02
     424:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     426:	fe 01       	movw	r30, r28
     428:	e3 5b       	subi	r30, 0xB3	; 179
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	60 81       	ld	r22, Z
     42e:	71 81       	ldd	r23, Z+1	; 0x01
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	93 81       	ldd	r25, Z+3	; 0x03
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e8       	ldi	r20, 0x80	; 128
     43a:	5f e3       	ldi	r21, 0x3F	; 63
     43c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     440:	88 23       	and	r24, r24
     442:	44 f4       	brge	.+16     	; 0x454 <lcd_set_4bit+0x398>
		__ticks = 1;
     444:	fe 01       	movw	r30, r28
     446:	e5 5b       	subi	r30, 0xB5	; 181
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	64 c0       	rjmp	.+200    	; 0x51c <__stack+0xbd>
	else if (__tmp > 65535)
     454:	fe 01       	movw	r30, r28
     456:	e3 5b       	subi	r30, 0xB3	; 179
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	60 81       	ld	r22, Z
     45c:	71 81       	ldd	r23, Z+1	; 0x01
     45e:	82 81       	ldd	r24, Z+2	; 0x02
     460:	93 81       	ldd	r25, Z+3	; 0x03
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	3f ef       	ldi	r19, 0xFF	; 255
     466:	4f e7       	ldi	r20, 0x7F	; 127
     468:	57 e4       	ldi	r21, 0x47	; 71
     46a:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     46e:	18 16       	cp	r1, r24
     470:	0c f0       	brlt	.+2      	; 0x474 <__stack+0x15>
     472:	43 c0       	rjmp	.+134    	; 0x4fa <__stack+0x9b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     474:	fe 01       	movw	r30, r28
     476:	ef 5a       	subi	r30, 0xAF	; 175
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	60 81       	ld	r22, Z
     47c:	71 81       	ldd	r23, Z+1	; 0x01
     47e:	82 81       	ldd	r24, Z+2	; 0x02
     480:	93 81       	ldd	r25, Z+3	; 0x03
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e2       	ldi	r20, 0x20	; 32
     488:	51 e4       	ldi	r21, 0x41	; 65
     48a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	8e 01       	movw	r16, r28
     494:	05 5b       	subi	r16, 0xB5	; 181
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	f8 01       	movw	r30, r16
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	1f c0       	rjmp	.+62     	; 0x4ea <__stack+0x8b>
     4ac:	fe 01       	movw	r30, r28
     4ae:	e7 5b       	subi	r30, 0xB7	; 183
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	88 eb       	ldi	r24, 0xB8	; 184
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
     4ba:	fe 01       	movw	r30, r28
     4bc:	e7 5b       	subi	r30, 0xB7	; 183
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__stack+0x65>
     4c8:	fe 01       	movw	r30, r28
     4ca:	e7 5b       	subi	r30, 0xB7	; 183
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d2:	de 01       	movw	r26, r28
     4d4:	a5 5b       	subi	r26, 0xB5	; 181
     4d6:	bf 4f       	sbci	r27, 0xFF	; 255
     4d8:	fe 01       	movw	r30, r28
     4da:	e5 5b       	subi	r30, 0xB5	; 181
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	11 96       	adiw	r26, 0x01	; 1
     4e6:	9c 93       	st	X, r25
     4e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ea:	fe 01       	movw	r30, r28
     4ec:	e5 5b       	subi	r30, 0xB5	; 181
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	d1 f6       	brne	.-76     	; 0x4ac <__stack+0x4d>
     4f8:	27 c0       	rjmp	.+78     	; 0x548 <__stack+0xe9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4fa:	8e 01       	movw	r16, r28
     4fc:	05 5b       	subi	r16, 0xB5	; 181
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	fe 01       	movw	r30, r28
     502:	e3 5b       	subi	r30, 0xB3	; 179
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	60 81       	ld	r22, Z
     508:	71 81       	ldd	r23, Z+1	; 0x01
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	93 81       	ldd	r25, Z+3	; 0x03
     50e:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	f8 01       	movw	r30, r16
     518:	91 83       	std	Z+1, r25	; 0x01
     51a:	80 83       	st	Z, r24
     51c:	de 01       	movw	r26, r28
     51e:	a9 5b       	subi	r26, 0xB9	; 185
     520:	bf 4f       	sbci	r27, 0xFF	; 255
     522:	fe 01       	movw	r30, r28
     524:	e5 5b       	subi	r30, 0xB5	; 181
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	80 81       	ld	r24, Z
     52a:	91 81       	ldd	r25, Z+1	; 0x01
     52c:	8d 93       	st	X+, r24
     52e:	9c 93       	st	X, r25
     530:	fe 01       	movw	r30, r28
     532:	e9 5b       	subi	r30, 0xB9	; 185
     534:	ff 4f       	sbci	r31, 0xFF	; 255
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <__stack+0xdb>
     53e:	fe 01       	movw	r30, r28
     540:	e9 5b       	subi	r30, 0xB9	; 185
     542:	ff 4f       	sbci	r31, 0xFF	; 255
     544:	91 83       	std	Z+1, r25	; 0x01
     546:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     548:	a5 e3       	ldi	r26, 0x35	; 53
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	e5 e3       	ldi	r30, 0x35	; 53
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	8e 7f       	andi	r24, 0xFE	; 254
     554:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     556:	a5 e3       	ldi	r26, 0x35	; 53
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	e5 e3       	ldi	r30, 0x35	; 53
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	8d 7f       	andi	r24, 0xFD	; 253
     562:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     564:	e5 e3       	ldi	r30, 0x35	; 53
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     56c:	a5 e3       	ldi	r26, 0x35	; 53
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	e5 e3       	ldi	r30, 0x35	; 53
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	84 60       	ori	r24, 0x04	; 4
     578:	8c 93       	st	X, r24
     57a:	fe 01       	movw	r30, r28
     57c:	ed 5b       	subi	r30, 0xBD	; 189
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 ea       	ldi	r26, 0xA0	; 160
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	80 83       	st	Z, r24
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	a2 83       	std	Z+2, r26	; 0x02
     58e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     590:	8e 01       	movw	r16, r28
     592:	01 5c       	subi	r16, 0xC1	; 193
     594:	1f 4f       	sbci	r17, 0xFF	; 255
     596:	fe 01       	movw	r30, r28
     598:	ed 5b       	subi	r30, 0xBD	; 189
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	60 81       	ld	r22, Z
     59e:	71 81       	ldd	r23, Z+1	; 0x01
     5a0:	82 81       	ldd	r24, Z+2	; 0x02
     5a2:	93 81       	ldd	r25, Z+3	; 0x03
     5a4:	26 e6       	ldi	r18, 0x66	; 102
     5a6:	36 e6       	ldi	r19, 0x66	; 102
     5a8:	46 ee       	ldi	r20, 0xE6	; 230
     5aa:	54 e4       	ldi	r21, 0x44	; 68
     5ac:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	f8 01       	movw	r30, r16
     5b6:	80 83       	st	Z, r24
     5b8:	91 83       	std	Z+1, r25	; 0x01
     5ba:	a2 83       	std	Z+2, r26	; 0x02
     5bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5be:	fe 01       	movw	r30, r28
     5c0:	ff 96       	adiw	r30, 0x3f	; 63
     5c2:	60 81       	ld	r22, Z
     5c4:	71 81       	ldd	r23, Z+1	; 0x01
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	5f e3       	ldi	r21, 0x3F	; 63
     5d2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     5d6:	88 23       	and	r24, r24
     5d8:	2c f4       	brge	.+10     	; 0x5e4 <__stack+0x185>
		__ticks = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	9e af       	std	Y+62, r25	; 0x3e
     5e0:	8d af       	std	Y+61, r24	; 0x3d
     5e2:	46 c0       	rjmp	.+140    	; 0x670 <__stack+0x211>
	else if (__tmp > 65535)
     5e4:	fe 01       	movw	r30, r28
     5e6:	ff 96       	adiw	r30, 0x3f	; 63
     5e8:	60 81       	ld	r22, Z
     5ea:	71 81       	ldd	r23, Z+1	; 0x01
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	93 81       	ldd	r25, Z+3	; 0x03
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	3f ef       	ldi	r19, 0xFF	; 255
     5f4:	4f e7       	ldi	r20, 0x7F	; 127
     5f6:	57 e4       	ldi	r21, 0x47	; 71
     5f8:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	64 f5       	brge	.+88     	; 0x658 <__stack+0x1f9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     600:	fe 01       	movw	r30, r28
     602:	ed 5b       	subi	r30, 0xBD	; 189
     604:	ff 4f       	sbci	r31, 0xFF	; 255
     606:	60 81       	ld	r22, Z
     608:	71 81       	ldd	r23, Z+1	; 0x01
     60a:	82 81       	ldd	r24, Z+2	; 0x02
     60c:	93 81       	ldd	r25, Z+3	; 0x03
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e2       	ldi	r20, 0x20	; 32
     614:	51 e4       	ldi	r21, 0x41	; 65
     616:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	bc 01       	movw	r22, r24
     620:	cd 01       	movw	r24, r26
     622:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9e af       	std	Y+62, r25	; 0x3e
     62c:	8d af       	std	Y+61, r24	; 0x3d
     62e:	0f c0       	rjmp	.+30     	; 0x64e <__stack+0x1ef>
     630:	88 eb       	ldi	r24, 0xB8	; 184
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	9c af       	std	Y+60, r25	; 0x3c
     636:	8b af       	std	Y+59, r24	; 0x3b
     638:	8b ad       	ldd	r24, Y+59	; 0x3b
     63a:	9c ad       	ldd	r25, Y+60	; 0x3c
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <__stack+0x1dd>
     640:	9c af       	std	Y+60, r25	; 0x3c
     642:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     644:	8d ad       	ldd	r24, Y+61	; 0x3d
     646:	9e ad       	ldd	r25, Y+62	; 0x3e
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	9e af       	std	Y+62, r25	; 0x3e
     64c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64e:	8d ad       	ldd	r24, Y+61	; 0x3d
     650:	9e ad       	ldd	r25, Y+62	; 0x3e
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	69 f7       	brne	.-38     	; 0x630 <__stack+0x1d1>
     656:	16 c0       	rjmp	.+44     	; 0x684 <__stack+0x225>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     658:	fe 01       	movw	r30, r28
     65a:	ff 96       	adiw	r30, 0x3f	; 63
     65c:	60 81       	ld	r22, Z
     65e:	71 81       	ldd	r23, Z+1	; 0x01
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	93 81       	ldd	r25, Z+3	; 0x03
     664:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	9e af       	std	Y+62, r25	; 0x3e
     66e:	8d af       	std	Y+61, r24	; 0x3d
     670:	8d ad       	ldd	r24, Y+61	; 0x3d
     672:	9e ad       	ldd	r25, Y+62	; 0x3e
     674:	9a af       	std	Y+58, r25	; 0x3a
     676:	89 af       	std	Y+57, r24	; 0x39
     678:	89 ad       	ldd	r24, Y+57	; 0x39
     67a:	9a ad       	ldd	r25, Y+58	; 0x3a
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <__stack+0x21d>
     680:	9a af       	std	Y+58, r25	; 0x3a
     682:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     684:	a5 e3       	ldi	r26, 0x35	; 53
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e5 e3       	ldi	r30, 0x35	; 53
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	8b 7f       	andi	r24, 0xFB	; 251
     690:	8c 93       	st	X, r24
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e8       	ldi	r26, 0x80	; 128
     698:	bf e3       	ldi	r27, 0x3F	; 63
     69a:	8d ab       	std	Y+53, r24	; 0x35
     69c:	9e ab       	std	Y+54, r25	; 0x36
     69e:	af ab       	std	Y+55, r26	; 0x37
     6a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6a2:	6d a9       	ldd	r22, Y+53	; 0x35
     6a4:	7e a9       	ldd	r23, Y+54	; 0x36
     6a6:	8f a9       	ldd	r24, Y+55	; 0x37
     6a8:	98 ad       	ldd	r25, Y+56	; 0x38
     6aa:	26 e6       	ldi	r18, 0x66	; 102
     6ac:	36 e6       	ldi	r19, 0x66	; 102
     6ae:	46 ee       	ldi	r20, 0xE6	; 230
     6b0:	54 e4       	ldi	r21, 0x44	; 68
     6b2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	89 ab       	std	Y+49, r24	; 0x31
     6bc:	9a ab       	std	Y+50, r25	; 0x32
     6be:	ab ab       	std	Y+51, r26	; 0x33
     6c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6c2:	69 a9       	ldd	r22, Y+49	; 0x31
     6c4:	7a a9       	ldd	r23, Y+50	; 0x32
     6c6:	8b a9       	ldd	r24, Y+51	; 0x33
     6c8:	9c a9       	ldd	r25, Y+52	; 0x34
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	40 e8       	ldi	r20, 0x80	; 128
     6d0:	5f e3       	ldi	r21, 0x3F	; 63
     6d2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     6d6:	88 23       	and	r24, r24
     6d8:	2c f4       	brge	.+10     	; 0x6e4 <__stack+0x285>
		__ticks = 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	98 ab       	std	Y+48, r25	; 0x30
     6e0:	8f a7       	std	Y+47, r24	; 0x2f
     6e2:	3f c0       	rjmp	.+126    	; 0x762 <__stack+0x303>
	else if (__tmp > 65535)
     6e4:	69 a9       	ldd	r22, Y+49	; 0x31
     6e6:	7a a9       	ldd	r23, Y+50	; 0x32
     6e8:	8b a9       	ldd	r24, Y+51	; 0x33
     6ea:	9c a9       	ldd	r25, Y+52	; 0x34
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	3f ef       	ldi	r19, 0xFF	; 255
     6f0:	4f e7       	ldi	r20, 0x7F	; 127
     6f2:	57 e4       	ldi	r21, 0x47	; 71
     6f4:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	4c f5       	brge	.+82     	; 0x74e <__stack+0x2ef>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6fc:	6d a9       	ldd	r22, Y+53	; 0x35
     6fe:	7e a9       	ldd	r23, Y+54	; 0x36
     700:	8f a9       	ldd	r24, Y+55	; 0x37
     702:	98 ad       	ldd	r25, Y+56	; 0x38
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	40 e2       	ldi	r20, 0x20	; 32
     70a:	51 e4       	ldi	r21, 0x41	; 65
     70c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	98 ab       	std	Y+48, r25	; 0x30
     722:	8f a7       	std	Y+47, r24	; 0x2f
     724:	0f c0       	rjmp	.+30     	; 0x744 <__stack+0x2e5>
     726:	88 eb       	ldi	r24, 0xB8	; 184
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9e a7       	std	Y+46, r25	; 0x2e
     72c:	8d a7       	std	Y+45, r24	; 0x2d
     72e:	8d a5       	ldd	r24, Y+45	; 0x2d
     730:	9e a5       	ldd	r25, Y+46	; 0x2e
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <__stack+0x2d3>
     736:	9e a7       	std	Y+46, r25	; 0x2e
     738:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73a:	8f a5       	ldd	r24, Y+47	; 0x2f
     73c:	98 a9       	ldd	r25, Y+48	; 0x30
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	98 ab       	std	Y+48, r25	; 0x30
     742:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     744:	8f a5       	ldd	r24, Y+47	; 0x2f
     746:	98 a9       	ldd	r25, Y+48	; 0x30
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	69 f7       	brne	.-38     	; 0x726 <__stack+0x2c7>
     74c:	14 c0       	rjmp	.+40     	; 0x776 <__stack+0x317>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     74e:	69 a9       	ldd	r22, Y+49	; 0x31
     750:	7a a9       	ldd	r23, Y+50	; 0x32
     752:	8b a9       	ldd	r24, Y+51	; 0x33
     754:	9c a9       	ldd	r25, Y+52	; 0x34
     756:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	98 ab       	std	Y+48, r25	; 0x30
     760:	8f a7       	std	Y+47, r24	; 0x2f
     762:	8f a5       	ldd	r24, Y+47	; 0x2f
     764:	98 a9       	ldd	r25, Y+48	; 0x30
     766:	9c a7       	std	Y+44, r25	; 0x2c
     768:	8b a7       	std	Y+43, r24	; 0x2b
     76a:	8b a5       	ldd	r24, Y+43	; 0x2b
     76c:	9c a5       	ldd	r25, Y+44	; 0x2c
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <__stack+0x30f>
     772:	9c a7       	std	Y+44, r25	; 0x2c
     774:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     776:	a5 e3       	ldi	r26, 0x35	; 53
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	e5 e3       	ldi	r30, 0x35	; 53
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     784:	a5 e3       	ldi	r26, 0x35	; 53
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	e5 e3       	ldi	r30, 0x35	; 53
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	8d 7f       	andi	r24, 0xFD	; 253
     790:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     792:	e5 e3       	ldi	r30, 0x35	; 53
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 e3       	ldi	r24, 0x30	; 48
     798:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     79a:	a5 e3       	ldi	r26, 0x35	; 53
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e5 e3       	ldi	r30, 0x35	; 53
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	80 81       	ld	r24, Z
     7a4:	84 60       	ori	r24, 0x04	; 4
     7a6:	8c 93       	st	X, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a0 ea       	ldi	r26, 0xA0	; 160
     7ae:	b0 e4       	ldi	r27, 0x40	; 64
     7b0:	8f a3       	std	Y+39, r24	; 0x27
     7b2:	98 a7       	std	Y+40, r25	; 0x28
     7b4:	a9 a7       	std	Y+41, r26	; 0x29
     7b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b8:	6f a1       	ldd	r22, Y+39	; 0x27
     7ba:	78 a5       	ldd	r23, Y+40	; 0x28
     7bc:	89 a5       	ldd	r24, Y+41	; 0x29
     7be:	9a a5       	ldd	r25, Y+42	; 0x2a
     7c0:	26 e6       	ldi	r18, 0x66	; 102
     7c2:	36 e6       	ldi	r19, 0x66	; 102
     7c4:	46 ee       	ldi	r20, 0xE6	; 230
     7c6:	54 e4       	ldi	r21, 0x44	; 68
     7c8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     7cc:	dc 01       	movw	r26, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	8b a3       	std	Y+35, r24	; 0x23
     7d2:	9c a3       	std	Y+36, r25	; 0x24
     7d4:	ad a3       	std	Y+37, r26	; 0x25
     7d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7d8:	6b a1       	ldd	r22, Y+35	; 0x23
     7da:	7c a1       	ldd	r23, Y+36	; 0x24
     7dc:	8d a1       	ldd	r24, Y+37	; 0x25
     7de:	9e a1       	ldd	r25, Y+38	; 0x26
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e8       	ldi	r20, 0x80	; 128
     7e6:	5f e3       	ldi	r21, 0x3F	; 63
     7e8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     7ec:	88 23       	and	r24, r24
     7ee:	2c f4       	brge	.+10     	; 0x7fa <__stack+0x39b>
		__ticks = 1;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9a a3       	std	Y+34, r25	; 0x22
     7f6:	89 a3       	std	Y+33, r24	; 0x21
     7f8:	3f c0       	rjmp	.+126    	; 0x878 <__stack+0x419>
	else if (__tmp > 65535)
     7fa:	6b a1       	ldd	r22, Y+35	; 0x23
     7fc:	7c a1       	ldd	r23, Y+36	; 0x24
     7fe:	8d a1       	ldd	r24, Y+37	; 0x25
     800:	9e a1       	ldd	r25, Y+38	; 0x26
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	3f ef       	ldi	r19, 0xFF	; 255
     806:	4f e7       	ldi	r20, 0x7F	; 127
     808:	57 e4       	ldi	r21, 0x47	; 71
     80a:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     80e:	18 16       	cp	r1, r24
     810:	4c f5       	brge	.+82     	; 0x864 <__stack+0x405>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     812:	6f a1       	ldd	r22, Y+39	; 0x27
     814:	78 a5       	ldd	r23, Y+40	; 0x28
     816:	89 a5       	ldd	r24, Y+41	; 0x29
     818:	9a a5       	ldd	r25, Y+42	; 0x2a
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e2       	ldi	r20, 0x20	; 32
     820:	51 e4       	ldi	r21, 0x41	; 65
     822:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	bc 01       	movw	r22, r24
     82c:	cd 01       	movw	r24, r26
     82e:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	9a a3       	std	Y+34, r25	; 0x22
     838:	89 a3       	std	Y+33, r24	; 0x21
     83a:	0f c0       	rjmp	.+30     	; 0x85a <__stack+0x3fb>
     83c:	88 eb       	ldi	r24, 0xB8	; 184
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	98 a3       	std	Y+32, r25	; 0x20
     842:	8f 8f       	std	Y+31, r24	; 0x1f
     844:	8f 8d       	ldd	r24, Y+31	; 0x1f
     846:	98 a1       	ldd	r25, Y+32	; 0x20
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <__stack+0x3e9>
     84c:	98 a3       	std	Y+32, r25	; 0x20
     84e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     850:	89 a1       	ldd	r24, Y+33	; 0x21
     852:	9a a1       	ldd	r25, Y+34	; 0x22
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	9a a3       	std	Y+34, r25	; 0x22
     858:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     85a:	89 a1       	ldd	r24, Y+33	; 0x21
     85c:	9a a1       	ldd	r25, Y+34	; 0x22
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	69 f7       	brne	.-38     	; 0x83c <__stack+0x3dd>
     862:	14 c0       	rjmp	.+40     	; 0x88c <__stack+0x42d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     864:	6b a1       	ldd	r22, Y+35	; 0x23
     866:	7c a1       	ldd	r23, Y+36	; 0x24
     868:	8d a1       	ldd	r24, Y+37	; 0x25
     86a:	9e a1       	ldd	r25, Y+38	; 0x26
     86c:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	9a a3       	std	Y+34, r25	; 0x22
     876:	89 a3       	std	Y+33, r24	; 0x21
     878:	89 a1       	ldd	r24, Y+33	; 0x21
     87a:	9a a1       	ldd	r25, Y+34	; 0x22
     87c:	9e 8f       	std	Y+30, r25	; 0x1e
     87e:	8d 8f       	std	Y+29, r24	; 0x1d
     880:	8d 8d       	ldd	r24, Y+29	; 0x1d
     882:	9e 8d       	ldd	r25, Y+30	; 0x1e
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x425>
     888:	9e 8f       	std	Y+30, r25	; 0x1e
     88a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     88c:	a5 e3       	ldi	r26, 0x35	; 53
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	e5 e3       	ldi	r30, 0x35	; 53
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	8b 7f       	andi	r24, 0xFB	; 251
     898:	8c 93       	st	X, r24
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a0 e8       	ldi	r26, 0x80	; 128
     8a0:	bf e3       	ldi	r27, 0x3F	; 63
     8a2:	89 8f       	std	Y+25, r24	; 0x19
     8a4:	9a 8f       	std	Y+26, r25	; 0x1a
     8a6:	ab 8f       	std	Y+27, r26	; 0x1b
     8a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8aa:	69 8d       	ldd	r22, Y+25	; 0x19
     8ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8b2:	26 e6       	ldi	r18, 0x66	; 102
     8b4:	36 e6       	ldi	r19, 0x66	; 102
     8b6:	46 ee       	ldi	r20, 0xE6	; 230
     8b8:	54 e4       	ldi	r21, 0x44	; 68
     8ba:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	8d 8b       	std	Y+21, r24	; 0x15
     8c4:	9e 8b       	std	Y+22, r25	; 0x16
     8c6:	af 8b       	std	Y+23, r26	; 0x17
     8c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8ca:	6d 89       	ldd	r22, Y+21	; 0x15
     8cc:	7e 89       	ldd	r23, Y+22	; 0x16
     8ce:	8f 89       	ldd	r24, Y+23	; 0x17
     8d0:	98 8d       	ldd	r25, Y+24	; 0x18
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e8       	ldi	r20, 0x80	; 128
     8d8:	5f e3       	ldi	r21, 0x3F	; 63
     8da:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     8de:	88 23       	and	r24, r24
     8e0:	2c f4       	brge	.+10     	; 0x8ec <__stack+0x48d>
		__ticks = 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	9c 8b       	std	Y+20, r25	; 0x14
     8e8:	8b 8b       	std	Y+19, r24	; 0x13
     8ea:	3f c0       	rjmp	.+126    	; 0x96a <__stack+0x50b>
	else if (__tmp > 65535)
     8ec:	6d 89       	ldd	r22, Y+21	; 0x15
     8ee:	7e 89       	ldd	r23, Y+22	; 0x16
     8f0:	8f 89       	ldd	r24, Y+23	; 0x17
     8f2:	98 8d       	ldd	r25, Y+24	; 0x18
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	3f ef       	ldi	r19, 0xFF	; 255
     8f8:	4f e7       	ldi	r20, 0x7F	; 127
     8fa:	57 e4       	ldi	r21, 0x47	; 71
     8fc:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     900:	18 16       	cp	r1, r24
     902:	4c f5       	brge	.+82     	; 0x956 <__stack+0x4f7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     904:	69 8d       	ldd	r22, Y+25	; 0x19
     906:	7a 8d       	ldd	r23, Y+26	; 0x1a
     908:	8b 8d       	ldd	r24, Y+27	; 0x1b
     90a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	bc 01       	movw	r22, r24
     91e:	cd 01       	movw	r24, r26
     920:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     924:	dc 01       	movw	r26, r24
     926:	cb 01       	movw	r24, r22
     928:	9c 8b       	std	Y+20, r25	; 0x14
     92a:	8b 8b       	std	Y+19, r24	; 0x13
     92c:	0f c0       	rjmp	.+30     	; 0x94c <__stack+0x4ed>
     92e:	88 eb       	ldi	r24, 0xB8	; 184
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	9a 8b       	std	Y+18, r25	; 0x12
     934:	89 8b       	std	Y+17, r24	; 0x11
     936:	89 89       	ldd	r24, Y+17	; 0x11
     938:	9a 89       	ldd	r25, Y+18	; 0x12
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x4db>
     93e:	9a 8b       	std	Y+18, r25	; 0x12
     940:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     942:	8b 89       	ldd	r24, Y+19	; 0x13
     944:	9c 89       	ldd	r25, Y+20	; 0x14
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	9c 8b       	std	Y+20, r25	; 0x14
     94a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94c:	8b 89       	ldd	r24, Y+19	; 0x13
     94e:	9c 89       	ldd	r25, Y+20	; 0x14
     950:	00 97       	sbiw	r24, 0x00	; 0
     952:	69 f7       	brne	.-38     	; 0x92e <__stack+0x4cf>
     954:	14 c0       	rjmp	.+40     	; 0x97e <__stack+0x51f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     956:	6d 89       	ldd	r22, Y+21	; 0x15
     958:	7e 89       	ldd	r23, Y+22	; 0x16
     95a:	8f 89       	ldd	r24, Y+23	; 0x17
     95c:	98 8d       	ldd	r25, Y+24	; 0x18
     95e:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	9c 8b       	std	Y+20, r25	; 0x14
     968:	8b 8b       	std	Y+19, r24	; 0x13
     96a:	8b 89       	ldd	r24, Y+19	; 0x13
     96c:	9c 89       	ldd	r25, Y+20	; 0x14
     96e:	98 8b       	std	Y+16, r25	; 0x10
     970:	8f 87       	std	Y+15, r24	; 0x0f
     972:	8f 85       	ldd	r24, Y+15	; 0x0f
     974:	98 89       	ldd	r25, Y+16	; 0x10
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	f1 f7       	brne	.-4      	; 0x976 <__stack+0x517>
     97a:	98 8b       	std	Y+16, r25	; 0x10
     97c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     97e:	a5 e3       	ldi	r26, 0x35	; 53
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e5 e3       	ldi	r30, 0x35	; 53
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8e 7f       	andi	r24, 0xFE	; 254
     98a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     98c:	a5 e3       	ldi	r26, 0x35	; 53
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e5 e3       	ldi	r30, 0x35	; 53
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8d 7f       	andi	r24, 0xFD	; 253
     998:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     99a:	e5 e3       	ldi	r30, 0x35	; 53
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     9a2:	a5 e3       	ldi	r26, 0x35	; 53
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e5 e3       	ldi	r30, 0x35	; 53
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	84 60       	ori	r24, 0x04	; 4
     9ae:	8c 93       	st	X, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 ea       	ldi	r26, 0xA0	; 160
     9b6:	b0 e4       	ldi	r27, 0x40	; 64
     9b8:	8b 87       	std	Y+11, r24	; 0x0b
     9ba:	9c 87       	std	Y+12, r25	; 0x0c
     9bc:	ad 87       	std	Y+13, r26	; 0x0d
     9be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c8:	26 e6       	ldi	r18, 0x66	; 102
     9ca:	36 e6       	ldi	r19, 0x66	; 102
     9cc:	46 ee       	ldi	r20, 0xE6	; 230
     9ce:	54 e4       	ldi	r21, 0x44	; 68
     9d0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	8f 83       	std	Y+7, r24	; 0x07
     9da:	98 87       	std	Y+8, r25	; 0x08
     9dc:	a9 87       	std	Y+9, r26	; 0x09
     9de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9e0:	6f 81       	ldd	r22, Y+7	; 0x07
     9e2:	78 85       	ldd	r23, Y+8	; 0x08
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e8       	ldi	r20, 0x80	; 128
     9ee:	5f e3       	ldi	r21, 0x3F	; 63
     9f0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	2c f4       	brge	.+10     	; 0xa02 <__stack+0x5a3>
		__ticks = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
     a00:	3f c0       	rjmp	.+126    	; 0xa80 <__stack+0x621>
	else if (__tmp > 65535)
     a02:	6f 81       	ldd	r22, Y+7	; 0x07
     a04:	78 85       	ldd	r23, Y+8	; 0x08
     a06:	89 85       	ldd	r24, Y+9	; 0x09
     a08:	9a 85       	ldd	r25, Y+10	; 0x0a
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	4f e7       	ldi	r20, 0x7F	; 127
     a10:	57 e4       	ldi	r21, 0x47	; 71
     a12:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     a16:	18 16       	cp	r1, r24
     a18:	4c f5       	brge	.+82     	; 0xa6c <__stack+0x60d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a20:	9e 85       	ldd	r25, Y+14	; 0x0e
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	51 e4       	ldi	r21, 0x41	; 65
     a2a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	bc 01       	movw	r22, r24
     a34:	cd 01       	movw	r24, r26
     a36:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	9e 83       	std	Y+6, r25	; 0x06
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	0f c0       	rjmp	.+30     	; 0xa62 <__stack+0x603>
     a44:	88 eb       	ldi	r24, 0xB8	; 184
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	9c 83       	std	Y+4, r25	; 0x04
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x5f1>
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a58:	8d 81       	ldd	r24, Y+5	; 0x05
     a5a:	9e 81       	ldd	r25, Y+6	; 0x06
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	9e 83       	std	Y+6, r25	; 0x06
     a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	69 f7       	brne	.-38     	; 0xa44 <__stack+0x5e5>
     a6a:	14 c0       	rjmp	.+40     	; 0xa94 <__stack+0x635>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6c:	6f 81       	ldd	r22, Y+7	; 0x07
     a6e:	78 85       	ldd	r23, Y+8	; 0x08
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	9e 83       	std	Y+6, r25	; 0x06
     a7e:	8d 83       	std	Y+5, r24	; 0x05
     a80:	8d 81       	ldd	r24, Y+5	; 0x05
     a82:	9e 81       	ldd	r25, Y+6	; 0x06
     a84:	9a 83       	std	Y+2, r25	; 0x02
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <__stack+0x62d>
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a94:	a5 e3       	ldi	r26, 0x35	; 53
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	e5 e3       	ldi	r30, 0x35	; 53
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	8b 7f       	andi	r24, 0xFB	; 251
     aa0:	8c 93       	st	X, r24

	
}
     aa2:	c0 59       	subi	r28, 0x90	; 144
     aa4:	df 4f       	sbci	r29, 0xFF	; 255
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret

00000aba <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     aba:	df 93       	push	r29
     abc:	cf 93       	push	r28
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	2e 97       	sbiw	r28, 0x0e	; 14
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e8       	ldi	r26, 0x80	; 128
     ad4:	bf e3       	ldi	r27, 0x3F	; 63
     ad6:	8b 87       	std	Y+11, r24	; 0x0b
     ad8:	9c 87       	std	Y+12, r25	; 0x0c
     ada:	ad 87       	std	Y+13, r26	; 0x0d
     adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ade:	6b 85       	ldd	r22, Y+11	; 0x0b
     ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae6:	26 e6       	ldi	r18, 0x66	; 102
     ae8:	36 e6       	ldi	r19, 0x66	; 102
     aea:	46 ee       	ldi	r20, 0xE6	; 230
     aec:	54 e4       	ldi	r21, 0x44	; 68
     aee:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8f 83       	std	Y+7, r24	; 0x07
     af8:	98 87       	std	Y+8, r25	; 0x08
     afa:	a9 87       	std	Y+9, r26	; 0x09
     afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     afe:	6f 81       	ldd	r22, Y+7	; 0x07
     b00:	78 85       	ldd	r23, Y+8	; 0x08
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	9a 85       	ldd	r25, Y+10	; 0x0a
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e8       	ldi	r20, 0x80	; 128
     b0c:	5f e3       	ldi	r21, 0x3F	; 63
     b0e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     b12:	88 23       	and	r24, r24
     b14:	2c f4       	brge	.+10     	; 0xb20 <lcd_init+0x66>
		__ticks = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	9e 83       	std	Y+6, r25	; 0x06
     b1c:	8d 83       	std	Y+5, r24	; 0x05
     b1e:	3f c0       	rjmp	.+126    	; 0xb9e <lcd_init+0xe4>
	else if (__tmp > 65535)
     b20:	6f 81       	ldd	r22, Y+7	; 0x07
     b22:	78 85       	ldd	r23, Y+8	; 0x08
     b24:	89 85       	ldd	r24, Y+9	; 0x09
     b26:	9a 85       	ldd	r25, Y+10	; 0x0a
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	3f ef       	ldi	r19, 0xFF	; 255
     b2c:	4f e7       	ldi	r20, 0x7F	; 127
     b2e:	57 e4       	ldi	r21, 0x47	; 71
     b30:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     b34:	18 16       	cp	r1, r24
     b36:	4c f5       	brge	.+82     	; 0xb8a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b38:	6b 85       	ldd	r22, Y+11	; 0x0b
     b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e2       	ldi	r20, 0x20	; 32
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	9e 83       	std	Y+6, r25	; 0x06
     b5e:	8d 83       	std	Y+5, r24	; 0x05
     b60:	0f c0       	rjmp	.+30     	; 0xb80 <lcd_init+0xc6>
     b62:	88 eb       	ldi	r24, 0xB8	; 184
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <lcd_init+0xb4>
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b76:	8d 81       	ldd	r24, Y+5	; 0x05
     b78:	9e 81       	ldd	r25, Y+6	; 0x06
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	9e 83       	std	Y+6, r25	; 0x06
     b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	9e 81       	ldd	r25, Y+6	; 0x06
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	69 f7       	brne	.-38     	; 0xb62 <lcd_init+0xa8>
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b8a:	6f 81       	ldd	r22, Y+7	; 0x07
     b8c:	78 85       	ldd	r23, Y+8	; 0x08
     b8e:	89 85       	ldd	r24, Y+9	; 0x09
     b90:	9a 85       	ldd	r25, Y+10	; 0x0a
     b92:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	9e 83       	std	Y+6, r25	; 0x06
     b9c:	8d 83       	std	Y+5, r24	; 0x05
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <lcd_init+0xf0>
     bae:	9a 83       	std	Y+2, r25	; 0x02
     bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     bb2:	88 e2       	ldi	r24, 0x28	; 40
     bb4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
	lcd_wr_command(0x01);
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
	lcd_wr_command(0x06);
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     bc4:	8e e0       	ldi	r24, 0x0E	; 14
     bc6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
	lcd_wr_command(0x80);
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
		
}
     bd0:	2e 96       	adiw	r28, 0x0e	; 14
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	6e 97       	sbiw	r28, 0x1e	; 30
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     bf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bfa:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     bfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bfe:	80 7f       	andi	r24, 0xF0	; 240
     c00:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c02:	a5 e3       	ldi	r26, 0x35	; 53
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e5 e3       	ldi	r30, 0x35	; 53
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8f 70       	andi	r24, 0x0F	; 15
     c0e:	8c 93       	st	X, r24
	lcd_port |= temp;
     c10:	a5 e3       	ldi	r26, 0x35	; 53
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e5 e3       	ldi	r30, 0x35	; 53
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	90 81       	ld	r25, Z
     c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c1c:	89 2b       	or	r24, r25
     c1e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c20:	a5 e3       	ldi	r26, 0x35	; 53
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e5 e3       	ldi	r30, 0x35	; 53
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8e 7f       	andi	r24, 0xFE	; 254
     c2c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c2e:	a5 e3       	ldi	r26, 0x35	; 53
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e5 e3       	ldi	r30, 0x35	; 53
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8d 7f       	andi	r24, 0xFD	; 253
     c3a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     c3c:	a5 e3       	ldi	r26, 0x35	; 53
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e3       	ldi	r30, 0x35	; 53
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	84 60       	ori	r24, 0x04	; 4
     c48:	8c 93       	st	X, r24
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a0 ea       	ldi	r26, 0xA0	; 160
     c50:	b0 e4       	ldi	r27, 0x40	; 64
     c52:	89 8f       	std	Y+25, r24	; 0x19
     c54:	9a 8f       	std	Y+26, r25	; 0x1a
     c56:	ab 8f       	std	Y+27, r26	; 0x1b
     c58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c5a:	69 8d       	ldd	r22, Y+25	; 0x19
     c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c62:	26 e6       	ldi	r18, 0x66	; 102
     c64:	36 e6       	ldi	r19, 0x66	; 102
     c66:	46 ee       	ldi	r20, 0xE6	; 230
     c68:	54 e4       	ldi	r21, 0x44	; 68
     c6a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	8d 8b       	std	Y+21, r24	; 0x15
     c74:	9e 8b       	std	Y+22, r25	; 0x16
     c76:	af 8b       	std	Y+23, r26	; 0x17
     c78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c7a:	6d 89       	ldd	r22, Y+21	; 0x15
     c7c:	7e 89       	ldd	r23, Y+22	; 0x16
     c7e:	8f 89       	ldd	r24, Y+23	; 0x17
     c80:	98 8d       	ldd	r25, Y+24	; 0x18
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     c8e:	88 23       	and	r24, r24
     c90:	2c f4       	brge	.+10     	; 0xc9c <lcd_wr_command+0xba>
		__ticks = 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9c 8b       	std	Y+20, r25	; 0x14
     c98:	8b 8b       	std	Y+19, r24	; 0x13
     c9a:	3f c0       	rjmp	.+126    	; 0xd1a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     c9c:	6d 89       	ldd	r22, Y+21	; 0x15
     c9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ca0:	8f 89       	ldd	r24, Y+23	; 0x17
     ca2:	98 8d       	ldd	r25, Y+24	; 0x18
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	4f e7       	ldi	r20, 0x7F	; 127
     caa:	57 e4       	ldi	r21, 0x47	; 71
     cac:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	4c f5       	brge	.+82     	; 0xd06 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb4:	69 8d       	ldd	r22, Y+25	; 0x19
     cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e2       	ldi	r20, 0x20	; 32
     cc2:	51 e4       	ldi	r21, 0x41	; 65
     cc4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	9c 8b       	std	Y+20, r25	; 0x14
     cda:	8b 8b       	std	Y+19, r24	; 0x13
     cdc:	0f c0       	rjmp	.+30     	; 0xcfc <lcd_wr_command+0x11a>
     cde:	88 eb       	ldi	r24, 0xB8	; 184
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9a 8b       	std	Y+18, r25	; 0x12
     ce4:	89 8b       	std	Y+17, r24	; 0x11
     ce6:	89 89       	ldd	r24, Y+17	; 0x11
     ce8:	9a 89       	ldd	r25, Y+18	; 0x12
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <lcd_wr_command+0x108>
     cee:	9a 8b       	std	Y+18, r25	; 0x12
     cf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf2:	8b 89       	ldd	r24, Y+19	; 0x13
     cf4:	9c 89       	ldd	r25, Y+20	; 0x14
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	9c 8b       	std	Y+20, r25	; 0x14
     cfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfc:	8b 89       	ldd	r24, Y+19	; 0x13
     cfe:	9c 89       	ldd	r25, Y+20	; 0x14
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	69 f7       	brne	.-38     	; 0xcde <lcd_wr_command+0xfc>
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	9c 8b       	std	Y+20, r25	; 0x14
     d18:	8b 8b       	std	Y+19, r24	; 0x13
     d1a:	8b 89       	ldd	r24, Y+19	; 0x13
     d1c:	9c 89       	ldd	r25, Y+20	; 0x14
     d1e:	98 8b       	std	Y+16, r25	; 0x10
     d20:	8f 87       	std	Y+15, r24	; 0x0f
     d22:	8f 85       	ldd	r24, Y+15	; 0x0f
     d24:	98 89       	ldd	r25, Y+16	; 0x10
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <lcd_wr_command+0x144>
     d2a:	98 8b       	std	Y+16, r25	; 0x10
     d2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d2e:	a5 e3       	ldi	r26, 0x35	; 53
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e3       	ldi	r30, 0x35	; 53
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8b 7f       	andi	r24, 0xFB	; 251
     d3a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     d3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d44:	82 95       	swap	r24
     d46:	80 7f       	andi	r24, 0xF0	; 240
     d48:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     d4a:	a5 e3       	ldi	r26, 0x35	; 53
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e3       	ldi	r30, 0x35	; 53
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	8c 93       	st	X, r24
	lcd_port |= cmd;
     d58:	a5 e3       	ldi	r26, 0x35	; 53
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e3       	ldi	r30, 0x35	; 53
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	90 81       	ld	r25, Z
     d62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d68:	a5 e3       	ldi	r26, 0x35	; 53
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e5 e3       	ldi	r30, 0x35	; 53
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d76:	a5 e3       	ldi	r26, 0x35	; 53
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e5 e3       	ldi	r30, 0x35	; 53
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d84:	a5 e3       	ldi	r26, 0x35	; 53
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e5 e3       	ldi	r30, 0x35	; 53
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	84 60       	ori	r24, 0x04	; 4
     d90:	8c 93       	st	X, r24
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 ea       	ldi	r26, 0xA0	; 160
     d98:	b0 e4       	ldi	r27, 0x40	; 64
     d9a:	8b 87       	std	Y+11, r24	; 0x0b
     d9c:	9c 87       	std	Y+12, r25	; 0x0c
     d9e:	ad 87       	std	Y+13, r26	; 0x0d
     da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	6b 85       	ldd	r22, Y+11	; 0x0b
     da4:	7c 85       	ldd	r23, Y+12	; 0x0c
     da6:	8d 85       	ldd	r24, Y+13	; 0x0d
     da8:	9e 85       	ldd	r25, Y+14	; 0x0e
     daa:	26 e6       	ldi	r18, 0x66	; 102
     dac:	36 e6       	ldi	r19, 0x66	; 102
     dae:	46 ee       	ldi	r20, 0xE6	; 230
     db0:	54 e4       	ldi	r21, 0x44	; 68
     db2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8f 83       	std	Y+7, r24	; 0x07
     dbc:	98 87       	std	Y+8, r25	; 0x08
     dbe:	a9 87       	std	Y+9, r26	; 0x09
     dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <lcd_wr_command+0x202>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <lcd_wr_command+0x262>
     e26:	88 eb       	ldi	r24, 0xB8	; 184
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <lcd_wr_command+0x250>
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <lcd_wr_command+0x244>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	78 85       	ldd	r23, Y+8	; 0x08
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <lcd_wr_command+0x28c>
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     e76:	a5 e3       	ldi	r26, 0x35	; 53
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e3       	ldi	r30, 0x35	; 53
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8b 7f       	andi	r24, 0xFB	; 251
     e82:	8c 93       	st	X, r24
}
     e84:	6e 96       	adiw	r28, 0x1e	; 30
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	6e 97       	sbiw	r28, 0x1e	; 30
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     eac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eae:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb2:	80 7f       	andi	r24, 0xF0	; 240
     eb4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     eb6:	a5 e3       	ldi	r26, 0x35	; 53
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e3       	ldi	r30, 0x35	; 53
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 70       	andi	r24, 0x0F	; 15
     ec2:	8c 93       	st	X, r24
	lcd_port |= temp;
     ec4:	a5 e3       	ldi	r26, 0x35	; 53
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e3       	ldi	r30, 0x35	; 53
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	90 81       	ld	r25, Z
     ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed0:	89 2b       	or	r24, r25
     ed2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     ed4:	a5 e3       	ldi	r26, 0x35	; 53
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e3       	ldi	r30, 0x35	; 53
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     ef0:	a5 e3       	ldi	r26, 0x35	; 53
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e3       	ldi	r30, 0x35	; 53
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	84 60       	ori	r24, 0x04	; 4
     efc:	8c 93       	st	X, r24
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a0 ea       	ldi	r26, 0xA0	; 160
     f04:	b0 e4       	ldi	r27, 0x40	; 64
     f06:	89 8f       	std	Y+25, r24	; 0x19
     f08:	9a 8f       	std	Y+26, r25	; 0x1a
     f0a:	ab 8f       	std	Y+27, r26	; 0x1b
     f0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	69 8d       	ldd	r22, Y+25	; 0x19
     f10:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f12:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f14:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f16:	26 e6       	ldi	r18, 0x66	; 102
     f18:	36 e6       	ldi	r19, 0x66	; 102
     f1a:	46 ee       	ldi	r20, 0xE6	; 230
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	8d 8b       	std	Y+21, r24	; 0x15
     f28:	9e 8b       	std	Y+22, r25	; 0x16
     f2a:	af 8b       	std	Y+23, r26	; 0x17
     f2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f2e:	6d 89       	ldd	r22, Y+21	; 0x15
     f30:	7e 89       	ldd	r23, Y+22	; 0x16
     f32:	8f 89       	ldd	r24, Y+23	; 0x17
     f34:	98 8d       	ldd	r25, Y+24	; 0x18
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
     f42:	88 23       	and	r24, r24
     f44:	2c f4       	brge	.+10     	; 0xf50 <lcd_wr_char+0xba>
		__ticks = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9c 8b       	std	Y+20, r25	; 0x14
     f4c:	8b 8b       	std	Y+19, r24	; 0x13
     f4e:	3f c0       	rjmp	.+126    	; 0xfce <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     f50:	6d 89       	ldd	r22, Y+21	; 0x15
     f52:	7e 89       	ldd	r23, Y+22	; 0x16
     f54:	8f 89       	ldd	r24, Y+23	; 0x17
     f56:	98 8d       	ldd	r25, Y+24	; 0x18
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	4f e7       	ldi	r20, 0x7F	; 127
     f5e:	57 e4       	ldi	r21, 0x47	; 71
     f60:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
     f64:	18 16       	cp	r1, r24
     f66:	4c f5       	brge	.+82     	; 0xfba <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	69 8d       	ldd	r22, Y+25	; 0x19
     f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <lcd_wr_char+0x11a>
     f92:	88 eb       	ldi	r24, 0xB8	; 184
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9a 8b       	std	Y+18, r25	; 0x12
     f98:	89 8b       	std	Y+17, r24	; 0x11
     f9a:	89 89       	ldd	r24, Y+17	; 0x11
     f9c:	9a 89       	ldd	r25, Y+18	; 0x12
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <lcd_wr_char+0x108>
     fa2:	9a 8b       	std	Y+18, r25	; 0x12
     fa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	8b 89       	ldd	r24, Y+19	; 0x13
     fb2:	9c 89       	ldd	r25, Y+20	; 0x14
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	69 f7       	brne	.-38     	; 0xf92 <lcd_wr_char+0xfc>
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fba:	6d 89       	ldd	r22, Y+21	; 0x15
     fbc:	7e 89       	ldd	r23, Y+22	; 0x16
     fbe:	8f 89       	ldd	r24, Y+23	; 0x17
     fc0:	98 8d       	ldd	r25, Y+24	; 0x18
     fc2:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9c 8b       	std	Y+20, r25	; 0x14
     fcc:	8b 8b       	std	Y+19, r24	; 0x13
     fce:	8b 89       	ldd	r24, Y+19	; 0x13
     fd0:	9c 89       	ldd	r25, Y+20	; 0x14
     fd2:	98 8b       	std	Y+16, r25	; 0x10
     fd4:	8f 87       	std	Y+15, r24	; 0x0f
     fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <lcd_wr_char+0x144>
     fde:	98 8b       	std	Y+16, r25	; 0x10
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe2:	a5 e3       	ldi	r26, 0x35	; 53
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e3       	ldi	r30, 0x35	; 53
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8b 7f       	andi	r24, 0xFB	; 251
     fee:	8c 93       	st	X, r24

	letter = letter & 0x0F;
     ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
     ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff8:	82 95       	swap	r24
     ffa:	80 7f       	andi	r24, 0xF0	; 240
     ffc:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 70       	andi	r24, 0x0F	; 15
    100a:	8c 93       	st	X, r24
	lcd_port |= letter;
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1018:	89 2b       	or	r24, r25
    101a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    101c:	a5 e3       	ldi	r26, 0x35	; 53
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e3       	ldi	r30, 0x35	; 53
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8d 7f       	andi	r24, 0xFD	; 253
    1036:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1038:	a5 e3       	ldi	r26, 0x35	; 53
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e3       	ldi	r30, 0x35	; 53
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	84 60       	ori	r24, 0x04	; 4
    1044:	8c 93       	st	X, r24
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 ea       	ldi	r26, 0xA0	; 160
    104c:	b0 e4       	ldi	r27, 0x40	; 64
    104e:	8b 87       	std	Y+11, r24	; 0x0b
    1050:	9c 87       	std	Y+12, r25	; 0x0c
    1052:	ad 87       	std	Y+13, r26	; 0x0d
    1054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1056:	6b 85       	ldd	r22, Y+11	; 0x0b
    1058:	7c 85       	ldd	r23, Y+12	; 0x0c
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	26 e6       	ldi	r18, 0x66	; 102
    1060:	36 e6       	ldi	r19, 0x66	; 102
    1062:	46 ee       	ldi	r20, 0xE6	; 230
    1064:	54 e4       	ldi	r21, 0x44	; 68
    1066:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8f 83       	std	Y+7, r24	; 0x07
    1070:	98 87       	std	Y+8, r25	; 0x08
    1072:	a9 87       	std	Y+9, r26	; 0x09
    1074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	5f e3       	ldi	r21, 0x3F	; 63
    1086:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
    108a:	88 23       	and	r24, r24
    108c:	2c f4       	brge	.+10     	; 0x1098 <lcd_wr_char+0x202>
		__ticks = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	4f e7       	ldi	r20, 0x7F	; 127
    10a6:	57 e4       	ldi	r21, 0x47	; 71
    10a8:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
    10ac:	18 16       	cp	r1, r24
    10ae:	4c f5       	brge	.+82     	; 0x1102 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	51 e4       	ldi	r21, 0x41	; 65
    10c0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	0f c0       	rjmp	.+30     	; 0x10f8 <lcd_wr_char+0x262>
    10da:	88 eb       	ldi	r24, 0xB8	; 184
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <lcd_wr_char+0x250>
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	69 f7       	brne	.-38     	; 0x10da <lcd_wr_char+0x244>
    1100:	14 c0       	rjmp	.+40     	; 0x112a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1102:	6f 81       	ldd	r22, Y+7	; 0x07
    1104:	78 85       	ldd	r23, Y+8	; 0x08
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <lcd_wr_char+0x28c>
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    112a:	a5 e3       	ldi	r26, 0x35	; 53
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8b 7f       	andi	r24, 0xFB	; 251
    1136:	8c 93       	st	X, r24
}
    1138:	6e 96       	adiw	r28, 0x1e	; 30
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
}
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <lcd_string+0x6>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <lcd_string+0x24>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	80 81       	ld	r24, Z
    1174:	0e 94 4b 07 	call	0xe96	; 0xe96 <lcd_wr_char>
		str++;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1182:	e9 81       	ldd	r30, Y+1	; 0x01
    1184:	fa 81       	ldd	r31, Y+2	; 0x02
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	89 f7       	brne	.-30     	; 0x116e <lcd_string+0x10>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <lcd_cursor+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <lcd_cursor+0x8>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 83       	std	Y+4, r19	; 0x04
    11ae:	2b 83       	std	Y+3, r18	; 0x03
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	91 05       	cpc	r25, r1
    11b8:	d9 f0       	breq	.+54     	; 0x11f0 <lcd_cursor+0x5a>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	23 30       	cpi	r18, 0x03	; 3
    11c0:	31 05       	cpc	r19, r1
    11c2:	34 f4       	brge	.+12     	; 0x11d0 <lcd_cursor+0x3a>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <lcd_cursor+0x50>
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <lcd_cursor+0x76>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 30       	cpi	r18, 0x03	; 3
    11d6:	31 05       	cpc	r19, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <lcd_cursor+0x64>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <lcd_cursor+0x6e>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	81 58       	subi	r24, 0x81	; 129
    11ea:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	81 54       	subi	r24, 0x41	; 65
    11f4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	8d 56       	subi	r24, 0x6D	; 109
    11fe:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
    1202:	04 c0       	rjmp	.+8      	; 0x120c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	8d 52       	subi	r24, 0x2D	; 45
    1208:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <lcd_wr_command>
		default: break;
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <motion_pin_config>:

void motion_pin_config (void)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
    1222:	a7 e3       	ldi	r26, 0x37	; 55
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 60       	ori	r24, 0x0F	; 15
    122e:	8c 93       	st	X, r24
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
    1230:	a8 e3       	ldi	r26, 0x38	; 56
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 7f       	andi	r24, 0xF0	; 240
    123c:	8c 93       	st	X, r24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
    123e:	a1 e3       	ldi	r26, 0x31	; 49
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e1 e3       	ldi	r30, 0x31	; 49
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 63       	ori	r24, 0x30	; 48
    124a:	8c 93       	st	X, r24
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
    124c:	a2 e3       	ldi	r26, 0x32	; 50
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 63       	ori	r24, 0x30	; 48
    1258:	8c 93       	st	X, r24
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <left_encoder_pin_config>:
//Function to configure INT1 (PORTD 3) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
 DDRD  = DDRD & 0xF7;  //Set the direction of the PORTD 3 pin as input
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	8c 93       	st	X, r24
 PORTD = PORTD | 0x08; //Enable internal pull-up for PORTD 3 pin
    1276:	a2 e3       	ldi	r26, 0x32	; 50
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8c 93       	st	X, r24
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <right_encoder_pin_config>:

//Function to configure INT0 (PORTD 2) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
 DDRD  = DDRD & 0xFB;  //Set the direction of the PORTD 2 pin as input
    1292:	a1 e3       	ldi	r26, 0x31	; 49
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e1 e3       	ldi	r30, 0x31	; 49
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	8c 93       	st	X, r24
 PORTD = PORTD | 0x04; //Enable internal pull-up for PORTD 2 pin
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	84 60       	ori	r24, 0x04	; 4
    12ac:	8c 93       	st	X, r24
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <port_init>:

//Function to initialize ports
void port_init()
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
 lcd_port_config();
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_port_config>
 motion_pin_config();          //robot motion pins config
    12c0:	0e 94 0d 09 	call	0x121a	; 0x121a <motion_pin_config>
 left_encoder_pin_config();    //left encoder pin config
    12c4:	0e 94 30 09 	call	0x1260	; 0x1260 <left_encoder_pin_config>
 right_encoder_pin_config();   //right encoder pin config	
    12c8:	0e 94 45 09 	call	0x128a	; 0x128a <right_encoder_pin_config>
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 1 enable
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    12da:	f8 94       	cli
 MCUCR = MCUCR | 0x08; // INT1 is set to trigger with falling edge
    12dc:	a5 e5       	ldi	r26, 0x55	; 85
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e5       	ldi	r30, 0x55	; 85
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	88 60       	ori	r24, 0x08	; 8
    12e8:	8c 93       	st	X, r24
 GICR = GICR | 0x80;   // Enable Interrupt INT1 for left position encoder
    12ea:	ab e5       	ldi	r26, 0x5B	; 91
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e5       	ldi	r30, 0x5B	; 91
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	8c 93       	st	X, r24
 sei(); // Enables the global interrupt 
    12f8:	78 94       	sei
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 0 enable
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1308:	f8 94       	cli
 MCUCR = MCUCR | 0x02; // INT0 is set to trigger with falling edge
    130a:	a5 e5       	ldi	r26, 0x55	; 85
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e5 e5       	ldi	r30, 0x55	; 85
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	8c 93       	st	X, r24
 GICR = GICR | 0x40;   // Enable Interrupt INT5 for right position encoder
    1318:	ab e5       	ldi	r26, 0x5B	; 91
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e5       	ldi	r30, 0x5B	; 91
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 64       	ori	r24, 0x40	; 64
    1324:	8c 93       	st	X, r24
 sei(); // Enables the global interrupt 
    1326:	78 94       	sei
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <__vector_1>:

//ISR for right position encoder
ISR(INT0_vect)  
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    1348:	80 91 90 01 	lds	r24, 0x0190
    134c:	90 91 91 01 	lds	r25, 0x0191
    1350:	a0 91 92 01 	lds	r26, 0x0192
    1354:	b0 91 93 01 	lds	r27, 0x0193
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	a1 1d       	adc	r26, r1
    135c:	b1 1d       	adc	r27, r1
    135e:	80 93 90 01 	sts	0x0190, r24
    1362:	90 93 91 01 	sts	0x0191, r25
    1366:	a0 93 92 01 	sts	0x0192, r26
    136a:	b0 93 93 01 	sts	0x0193, r27
}
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_2>:

//ISR for left position encoder
ISR(INT1_vect)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    139e:	80 91 8c 01 	lds	r24, 0x018C
    13a2:	90 91 8d 01 	lds	r25, 0x018D
    13a6:	a0 91 8e 01 	lds	r26, 0x018E
    13aa:	b0 91 8f 01 	lds	r27, 0x018F
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	a1 1d       	adc	r26, r1
    13b2:	b1 1d       	adc	r27, r1
    13b4:	80 93 8c 01 	sts	0x018C, r24
    13b8:	90 93 8d 01 	sts	0x018D, r25
    13bc:	a0 93 8e 01 	sts	0x018E, r26
    13c0:	b0 93 8f 01 	sts	0x018F, r27
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	bf 91       	pop	r27
    13ca:	af 91       	pop	r26
    13cc:	9f 91       	pop	r25
    13ce:	8f 91       	pop	r24
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	8f 93       	push	r24
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
  // Timer 2 over flow 
  Servo2port |= (1 << Servo2bit); // set servo 2 control pin
    13f6:	a2 e3       	ldi	r26, 0x32	; 50
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e2 e3       	ldi	r30, 0x32	; 50
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	8c 93       	st	X, r24
  TCNT0 = 0x6F; // reload timer 0 initial value 
    1404:	e2 e5       	ldi	r30, 0x52	; 82
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8f e6       	ldi	r24, 0x6F	; 111
    140a:	80 83       	st	Z, r24
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	8f 91       	pop	r24
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__vector_19>:

//-------------------------------------------------------------------------

ISR(TIMER0_COMP_vect)
{
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	8f 93       	push	r24
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
  // Timer 0 compare match interrupt 
  Servo2port &= ~(1 << Servo2bit); //clear servo 2 control pin 
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8f 77       	andi	r24, 0x7F	; 127
    144c:	8c 93       	st	X, r24
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	8f 91       	pop	r24
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <uart0_init>:
// desired baud rate: 9600
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x00; //disable while setting baud rate
    146e:	ea e2       	ldi	r30, 0x2A	; 42
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	10 82       	st	Z, r1
 UCSRA = 0x00;
    1474:	eb e2       	ldi	r30, 0x2B	; 43
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	10 82       	st	Z, r1
 UCSRC = 0x86;
    147a:	e0 e4       	ldi	r30, 0x40	; 64
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	86 e8       	ldi	r24, 0x86	; 134
    1480:	80 83       	st	Z, r24
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
    1482:	e9 e2       	ldi	r30, 0x29	; 41
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8f e2       	ldi	r24, 0x2F	; 47
    1488:	80 83       	st	Z, r24
 UBRRH = 0x00; //set baud rate hi
    148a:	e0 e4       	ldi	r30, 0x40	; 64
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
 UCSRB = 0x98; 
    1490:	ea e2       	ldi	r30, 0x2A	; 42
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	88 e9       	ldi	r24, 0x98	; 152
    1496:	80 83       	st	Z, r24
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <servo_init>:

void servo_init(void) 
{ 
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    
	DDRD|=(1<<PD7); //input defination 
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 68       	ori	r24, 0x80	; 128
    14b2:	8c 93       	st	X, r24
	TCCR0|=(1<<CS02)|(1<<CS00);    // Timer 0 prescaler 1024 , normal mode 
    14b4:	a3 e5       	ldi	r26, 0x53	; 83
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e3 e5       	ldi	r30, 0x53	; 83
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	85 60       	ori	r24, 0x05	; 5
    14c0:	8c 93       	st	X, r24
	TCNT0=0x6F;                               // Timer 0 initial vlaue 
    14c2:	e2 e5       	ldi	r30, 0x52	; 82
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8f e6       	ldi	r24, 0x6F	; 111
    14c8:	80 83       	st	Z, r24
 	TIMSK|=(1<<OCIE0)|(1<<TOIE0); // timer 0 compare match and overflow interrupt enable  
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	83 60       	ori	r24, 0x03	; 3
    14d6:	8c 93       	st	X, r24
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <motion_set+0x6>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortBRestore = 0;
    14ea:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	8f 70       	andi	r24, 0x0F	; 15
    14f0:	8a 83       	std	Y+2, r24	; 0x02
 PortBRestore = PORTB; 			// reading the PORTB's original status
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	80 7f       	andi	r24, 0xF0	; 240
    14fe:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
    1500:	99 81       	ldd	r25, Y+1	; 0x01
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	89 2b       	or	r24, r25
    1506:	89 83       	std	Y+1, r24	; 0x01
 PORTB = PortBRestore; 			// setting the command to the port
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	80 83       	st	Z, r24
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <forward>:

void forward (void)         //both wheels forward
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    1522:	86 e0       	ldi	r24, 0x06	; 6
    1524:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <back>:

void back(void)        //both wheels backward
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    1536:	89 e0       	ldi	r24, 0x09	; 9
    1538:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <left>:

void left (void)            //Left wheel backward, Right wheel forward
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <right>:

void right (void)           //Left wheel forward, Right wheel backward
{   
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    155e:	8a e0       	ldi	r24, 0x0A	; 10
    1560:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <stop>:

void stop (void)            //hard stop
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <soft_left>:
void soft_left (void)       //Left wheel stationary, Right wheel forward
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    1586:	84 e0       	ldi	r24, 0x04	; 4
    1588:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <soft_right>:
void soft_right (void)      //Left wheel forward, Right wheel is stationary
{ 
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	0e 94 6f 0a 	call	0x14de	; 0x14de <motion_set>
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <angle_rotate>:

void angle_rotate(unsigned int Degrees)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	2c 97       	sbiw	r28, 0x0c	; 12
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	9a 87       	std	Y+10, r25	; 0x0a
    15bc:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	af 83       	std	Y+7, r26	; 0x07
    15cc:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	1a 82       	std	Y+2, r1	; 0x02
    15d2:	1b 82       	std	Y+3, r1	; 0x03
    15d4:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 12.85; // division by resolution to get shaft count 
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	cc 01       	movw	r24, r24
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 6d 14 	call	0x28da	; 0x28da <__floatunsisf>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	2a e9       	ldi	r18, 0x9A	; 154
    15f2:	39 e9       	ldi	r19, 0x99	; 153
    15f4:	4d e4       	ldi	r20, 0x4D	; 77
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__divsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	af 83       	std	Y+7, r26	; 0x07
    1606:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	98 85       	ldd	r25, Y+8	; 0x08
    1610:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	cc 01       	movw	r24, r24
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	ab 83       	std	Y+3, r26	; 0x03
    1624:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
    1626:	10 92 90 01 	sts	0x0190, r1
    162a:	10 92 91 01 	sts	0x0191, r1
    162e:	10 92 92 01 	sts	0x0192, r1
    1632:	10 92 93 01 	sts	0x0193, r1
 ShaftCountLeft = 0; 
    1636:	10 92 8c 01 	sts	0x018C, r1
    163a:	10 92 8d 01 	sts	0x018D, r1
    163e:	10 92 8e 01 	sts	0x018E, r1
    1642:	10 92 8f 01 	sts	0x018F, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1646:	20 91 90 01 	lds	r18, 0x0190
    164a:	30 91 91 01 	lds	r19, 0x0191
    164e:	40 91 92 01 	lds	r20, 0x0192
    1652:	50 91 93 01 	lds	r21, 0x0193
    1656:	1c 86       	std	Y+12, r1	; 0x0c
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	ab 81       	ldd	r26, Y+3	; 0x03
    165e:	bc 81       	ldd	r27, Y+4	; 0x04
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	4a 07       	cpc	r20, r26
    1666:	5b 07       	cpc	r21, r27
    1668:	10 f0       	brcs	.+4      	; 0x166e <angle_rotate+0xc8>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8c 87       	std	Y+12, r24	; 0x0c
    166e:	20 91 8c 01 	lds	r18, 0x018C
    1672:	30 91 8d 01 	lds	r19, 0x018D
    1676:	40 91 8e 01 	lds	r20, 0x018E
    167a:	50 91 8f 01 	lds	r21, 0x018F
    167e:	1b 86       	std	Y+11, r1	; 0x0b
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	ab 81       	ldd	r26, Y+3	; 0x03
    1686:	bc 81       	ldd	r27, Y+4	; 0x04
    1688:	28 17       	cp	r18, r24
    168a:	39 07       	cpc	r19, r25
    168c:	4a 07       	cpc	r20, r26
    168e:	5b 07       	cpc	r21, r27
    1690:	10 f0       	brcs	.+4      	; 0x1696 <angle_rotate+0xf0>
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	9b 87       	std	Y+11, r25	; 0x0b
    1696:	8c 85       	ldd	r24, Y+12	; 0x0c
    1698:	9b 85       	ldd	r25, Y+11	; 0x0b
    169a:	89 2b       	or	r24, r25
    169c:	88 23       	and	r24, r24
    169e:	99 f2       	breq	.-90     	; 0x1646 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    16a0:	0e 94 b5 0a 	call	0x156a	; 0x156a <stop>
}
    16a4:	2c 96       	adiw	r28, 0x0c	; 12
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	2c 97       	sbiw	r28, 0x0c	; 12
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	9a 87       	std	Y+10, r25	; 0x0a
    16cc:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	af 83       	std	Y+7, r26	; 0x07
    16dc:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    16de:	19 82       	std	Y+1, r1	; 0x01
    16e0:	1a 82       	std	Y+2, r1	; 0x02
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 12.92; // division by resolution to get shaft count
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	cc 01       	movw	r24, r24
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 6d 14 	call	0x28da	; 0x28da <__floatunsisf>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	22 e5       	ldi	r18, 0x52	; 82
    1702:	38 eb       	ldi	r19, 0xB8	; 184
    1704:	4e e4       	ldi	r20, 0x4E	; 78
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 dd 12 	call	0x25ba	; 0x25ba <__divsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	af 83       	std	Y+7, r26	; 0x07
    1716:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1718:	6d 81       	ldd	r22, Y+5	; 0x05
    171a:	7e 81       	ldd	r23, Y+6	; 0x06
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	98 85       	ldd	r25, Y+8	; 0x08
    1720:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	ab 83       	std	Y+3, r26	; 0x03
    172e:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0;
    1730:	10 92 90 01 	sts	0x0190, r1
    1734:	10 92 91 01 	sts	0x0191, r1
    1738:	10 92 92 01 	sts	0x0192, r1
    173c:	10 92 93 01 	sts	0x0193, r1
 ShaftCountLeft = 0; 
    1740:	10 92 8c 01 	sts	0x018C, r1
    1744:	10 92 8d 01 	sts	0x018D, r1
    1748:	10 92 8e 01 	sts	0x018E, r1
    174c:	10 92 8f 01 	sts	0x018F, r1
 while(1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) & (ShaftCountLeft >= ReqdShaftCountInt))
    1750:	20 91 90 01 	lds	r18, 0x0190
    1754:	30 91 91 01 	lds	r19, 0x0191
    1758:	40 91 92 01 	lds	r20, 0x0192
    175c:	50 91 93 01 	lds	r21, 0x0193
    1760:	1c 86       	std	Y+12, r1	; 0x0c
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	ab 81       	ldd	r26, Y+3	; 0x03
    1768:	bc 81       	ldd	r27, Y+4	; 0x04
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	4a 07       	cpc	r20, r26
    1770:	5b 07       	cpc	r21, r27
    1772:	10 f0       	brcs	.+4      	; 0x1778 <linear_distance_mm+0xc2>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	8c 87       	std	Y+12, r24	; 0x0c
    1778:	20 91 8c 01 	lds	r18, 0x018C
    177c:	30 91 8d 01 	lds	r19, 0x018D
    1780:	40 91 8e 01 	lds	r20, 0x018E
    1784:	50 91 8f 01 	lds	r21, 0x018F
    1788:	1b 86       	std	Y+11, r1	; 0x0b
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	ab 81       	ldd	r26, Y+3	; 0x03
    1790:	bc 81       	ldd	r27, Y+4	; 0x04
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	4a 07       	cpc	r20, r26
    1798:	5b 07       	cpc	r21, r27
    179a:	10 f0       	brcs	.+4      	; 0x17a0 <linear_distance_mm+0xea>
    179c:	91 e0       	ldi	r25, 0x01	; 1
    179e:	9b 87       	std	Y+11, r25	; 0x0b
    17a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a4:	89 23       	and	r24, r25
    17a6:	88 23       	and	r24, r24
    17a8:	99 f2       	breq	.-90     	; 0x1750 <linear_distance_mm+0x9a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
    17aa:	0e 94 b5 0a 	call	0x156a	; 0x156a <stop>
}
    17ae:	2c 96       	adiw	r28, 0x0c	; 12
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <forward_mm+0x6>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
 forward();
    17ce:	0e 94 8d 0a 	call	0x151a	; 0x151a <forward>
 linear_distance_mm(DistanceInMM);
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <linear_distance_mm>
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <back_mm+0x6>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
 back();
    17f2:	0e 94 97 0a 	call	0x152e	; 0x152e <back>
 linear_distance_mm(DistanceInMM);
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <linear_distance_mm>
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <left_degrees+0x6>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
// 28 pulses for 360 degrees rotation 12.92 degrees per count
 //left(); //Turn left
 //angle_rotate(Degrees);
 soft_left(); //Turn soft left
    1816:	0e 94 bf 0a 	call	0x157e	; 0x157e <soft_left>
 Degrees=Degrees*2;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <angle_rotate>
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <right_degrees+0x6>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
// 28 pulses for 360 degrees rotation 12.92 degrees per count
 //right(); //Turn right
 //angle_rotate(Degrees);
 soft_right();  //Turn soft right
    1846:	0e 94 c9 0a 	call	0x1592	; 0x1592 <soft_right>
 Degrees=Degrees*2;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <angle_rotate>
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <init_devices>:

void init_devices (void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1870:	f8 94       	cli
 port_init();  //Initializes all the ports
    1872:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <port_init>
 uart0_init();
    1876:	0e 94 33 0a 	call	0x1466	; 0x1466 <uart0_init>
 lcd_set_4bit();
    187a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_set_4bit>
 lcd_init(); 
    187e:	0e 94 5d 05 	call	0xaba	; 0xaba <lcd_init>
 servo_init();
    1882:	0e 94 4f 0a 	call	0x149e	; 0x149e <servo_init>
 left_position_encoder_interrupt_init();
    1886:	0e 94 69 09 	call	0x12d2	; 0x12d2 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    188a:	0e 94 80 09 	call	0x1300	; 0x1300 <right_position_encoder_interrupt_init>
 sei();   // Enables the global interrupt 
    188e:	78 94       	sei
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <uart0_clr>:
void uart0_clr(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x18; 
    189e:	ea e2       	ldi	r30, 0x2A	; 42
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	88 e1       	ldi	r24, 0x18	; 24
    18a4:	80 83       	st	Z, r24
}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <uart0_rein>:
void uart0_rein(void)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
 UCSRB = 0x98; 
    18b4:	ea e2       	ldi	r30, 0x2A	; 42
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	88 e9       	ldi	r24, 0x98	; 152
    18ba:	80 83       	st	Z, r24
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <__vector_11>:

SIGNAL(SIG_UART_RECV) 
{
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	8f 93       	push	r24
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    receive_data = UDR;			
    18da:	ec e2       	ldi	r30, 0x2C	; 44
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 93 60 00 	sts	0x0060, r24
    UDR = '.';          
    18e4:	ec e2       	ldi	r30, 0x2C	; 44
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8e e2       	ldi	r24, 0x2E	; 46
    18ea:	80 83       	st	Z, r24
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	8f 91       	pop	r24
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <main>:


//Main Function
int main()
{ 
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	6c 97       	sbiw	r28, 0x1c	; 28
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
   init_devices();
    1914:	0e 94 34 0c 	call	0x1868	; 0x1868 <init_devices>
   while(1)
   {
     if(receive_data=='<')
    1918:	80 91 60 00 	lds	r24, 0x0060
    191c:	8c 33       	cpi	r24, 0x3C	; 60
    191e:	81 f4       	brne	.+32     	; 0x1940 <main+0x40>
     {
       lcd_cursor(1,1);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	0e 94 cb 08 	call	0x1196	; 0x1196 <lcd_cursor>
       lcd_string("Drawing Completed");
    1928:	81 e6       	ldi	r24, 0x61	; 97
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 af 08 	call	0x115e	; 0x115e <lcd_string>
       lcd_cursor(2,1);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	0e 94 cb 08 	call	0x1196	; 0x1196 <lcd_cursor>
       lcd_string("NEX ROBOTICS IND");
    1938:	83 e7       	ldi	r24, 0x73	; 115
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 af 08 	call	0x115e	; 0x115e <lcd_string>
     }
     if(receive_data=='[')
    1940:	80 91 60 00 	lds	r24, 0x0060
    1944:	8b 35       	cpi	r24, 0x5B	; 91
    1946:	09 f0       	breq	.+2      	; 0x194a <main+0x4a>
    1948:	76 c0       	rjmp	.+236    	; 0x1a36 <main+0x136>
	 {
	    S2=0x78;
    194a:	ec e5       	ldi	r30, 0x5C	; 92
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	88 e7       	ldi	r24, 0x78	; 120
    1950:	80 83       	st	Z, r24
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	aa e7       	ldi	r26, 0x7A	; 122
    1958:	b4 e4       	ldi	r27, 0x44	; 68
    195a:	89 8f       	std	Y+25, r24	; 0x19
    195c:	9a 8f       	std	Y+26, r25	; 0x1a
    195e:	ab 8f       	std	Y+27, r26	; 0x1b
    1960:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	26 e6       	ldi	r18, 0x66	; 102
    196c:	36 e6       	ldi	r19, 0x66	; 102
    196e:	46 ee       	ldi	r20, 0xE6	; 230
    1970:	54 e4       	ldi	r21, 0x44	; 68
    1972:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8d 8b       	std	Y+21, r24	; 0x15
    197c:	9e 8b       	std	Y+22, r25	; 0x16
    197e:	af 8b       	std	Y+23, r26	; 0x17
    1980:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
    1996:	88 23       	and	r24, r24
    1998:	2c f4       	brge	.+10     	; 0x19a4 <main+0xa4>
		__ticks = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 8b       	std	Y+20, r25	; 0x14
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <main+0x122>
	else if (__tmp > 65535)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	4c f5       	brge	.+82     	; 0x1a0e <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	69 8d       	ldd	r22, Y+25	; 0x19
    19be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e2       	ldi	r20, 0x20	; 32
    19ca:	51 e4       	ldi	r21, 0x41	; 65
    19cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <main+0x104>
    19e6:	88 eb       	ldi	r24, 0xB8	; 184
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9a 8b       	std	Y+18, r25	; 0x12
    19ec:	89 8b       	std	Y+17, r24	; 0x11
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	9a 89       	ldd	r25, Y+18	; 0x12
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <main+0xf2>
    19f6:	9a 8b       	std	Y+18, r25	; 0x12
    19f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	8b 89       	ldd	r24, Y+19	; 0x13
    19fc:	9c 89       	ldd	r25, Y+20	; 0x14
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <main+0xe6>
    1a0c:	14 c0       	rjmp	.+40     	; 0x1a36 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a10:	7e 89       	ldd	r23, Y+22	; 0x16
    1a12:	8f 89       	ldd	r24, Y+23	; 0x17
    1a14:	98 8d       	ldd	r25, Y+24	; 0x18
    1a16:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	8b 89       	ldd	r24, Y+19	; 0x13
    1a24:	9c 89       	ldd	r25, Y+20	; 0x14
    1a26:	98 8b       	std	Y+16, r25	; 0x10
    1a28:	8f 87       	std	Y+15, r24	; 0x0f
    1a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2c:	98 89       	ldd	r25, Y+16	; 0x10
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <main+0x12e>
    1a32:	98 8b       	std	Y+16, r25	; 0x10
    1a34:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
	 }

	 if(receive_data==']')
    1a36:	80 91 60 00 	lds	r24, 0x0060
    1a3a:	8d 35       	cpi	r24, 0x5D	; 93
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <main+0x140>
    1a3e:	76 c0       	rjmp	.+236    	; 0x1b2c <main+0x22c>
	 {
	    S2=0x7F;
    1a40:	ec e5       	ldi	r30, 0x5C	; 92
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8f e7       	ldi	r24, 0x7F	; 127
    1a46:	80 83       	st	Z, r24
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	aa e7       	ldi	r26, 0x7A	; 122
    1a4e:	b4 e4       	ldi	r27, 0x44	; 68
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	26 e6       	ldi	r18, 0x66	; 102
    1a62:	36 e6       	ldi	r19, 0x66	; 102
    1a64:	46 ee       	ldi	r20, 0xE6	; 230
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <main+0x19a>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <main+0x218>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 89 13 	call	0x2712	; 0x2712 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <main+0x1fa>
    1adc:	88 eb       	ldi	r24, 0xB8	; 184
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <main+0x1e8>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <main+0x1dc>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 0d 10 	call	0x201a	; 0x201a <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <main+0x224>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	 }

     if(receive_data == 'r'||receive_data == 'g'||receive_data == 'b')      
    1b2c:	80 91 60 00 	lds	r24, 0x0060
    1b30:	82 37       	cpi	r24, 0x72	; 114
    1b32:	41 f0       	breq	.+16     	; 0x1b44 <main+0x244>
    1b34:	80 91 60 00 	lds	r24, 0x0060
    1b38:	87 36       	cpi	r24, 0x67	; 103
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <main+0x244>
    1b3c:	80 91 60 00 	lds	r24, 0x0060
    1b40:	82 36       	cpi	r24, 0x62	; 98
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <main+0x252>
     {
        //uart0_clr();
        color=receive_data;
    1b44:	80 91 60 00 	lds	r24, 0x0060
    1b48:	80 93 9a 01 	sts	0x019A, r24
		receive_data='0';
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	80 93 60 00 	sts	0x0060, r24
        //continue;
     }  	 
     if(receive_data == 'w'||receive_data == 'a'||receive_data == 'd'||receive_data == 's')      
    1b52:	80 91 60 00 	lds	r24, 0x0060
    1b56:	87 37       	cpi	r24, 0x77	; 119
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <main+0x272>
    1b5a:	80 91 60 00 	lds	r24, 0x0060
    1b5e:	81 36       	cpi	r24, 0x61	; 97
    1b60:	41 f0       	breq	.+16     	; 0x1b72 <main+0x272>
    1b62:	80 91 60 00 	lds	r24, 0x0060
    1b66:	84 36       	cpi	r24, 0x64	; 100
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <main+0x272>
    1b6a:	80 91 60 00 	lds	r24, 0x0060
    1b6e:	83 37       	cpi	r24, 0x73	; 115
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <main+0x280>
     {
        //uart0_clr();
        flag=receive_data;
    1b72:	80 91 60 00 	lds	r24, 0x0060
    1b76:	80 93 99 01 	sts	0x0199, r24
		receive_data='0';
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	80 93 60 00 	sts	0x0060, r24
        //continue;
     }
	 if(receive_data == 't'||receive_data == 'h')
    1b80:	80 91 60 00 	lds	r24, 0x0060
    1b84:	84 37       	cpi	r24, 0x74	; 116
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <main+0x290>
    1b88:	80 91 60 00 	lds	r24, 0x0060
    1b8c:	88 36       	cpi	r24, 0x68	; 104
    1b8e:	39 f4       	brne	.+14     	; 0x1b9e <main+0x29e>
	 {
	     digit=receive_data;
    1b90:	80 91 60 00 	lds	r24, 0x0060
    1b94:	80 93 96 01 	sts	0x0196, r24
         receive_data='0';
    1b98:	80 e3       	ldi	r24, 0x30	; 48
    1b9a:	80 93 60 00 	sts	0x0060, r24
	 }	 
	 if(color=='r'&&flag=='w'&&digit=='h')
    1b9e:	80 91 9a 01 	lds	r24, 0x019A
    1ba2:	82 37       	cpi	r24, 0x72	; 114
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <main+0x2a8>
    1ba6:	6d c0       	rjmp	.+218    	; 0x1c82 <main+0x382>
    1ba8:	80 91 99 01 	lds	r24, 0x0199
    1bac:	87 37       	cpi	r24, 0x77	; 119
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <main+0x2b2>
    1bb0:	68 c0       	rjmp	.+208    	; 0x1c82 <main+0x382>
    1bb2:	80 91 96 01 	lds	r24, 0x0196
    1bb6:	88 36       	cpi	r24, 0x68	; 104
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <main+0x2bc>
    1bba:	63 c0       	rjmp	.+198    	; 0x1c82 <main+0x382>
	 {
	     if(receive_data=='1')
    1bbc:	80 91 60 00 	lds	r24, 0x0060
    1bc0:	81 33       	cpi	r24, 0x31	; 49
    1bc2:	39 f4       	brne	.+14     	; 0x1bd2 <main+0x2d2>
		 {
		    forward_mm(100);
    1bc4:	84 e6       	ldi	r24, 0x64	; 100
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1bcc:	80 e3       	ldi	r24, 0x30	; 48
    1bce:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1bd2:	80 91 60 00 	lds	r24, 0x0060
    1bd6:	82 33       	cpi	r24, 0x32	; 50
    1bd8:	39 f4       	brne	.+14     	; 0x1be8 <main+0x2e8>
		 {
		    forward_mm(200);
    1bda:	88 ec       	ldi	r24, 0xC8	; 200
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1be2:	80 e3       	ldi	r24, 0x30	; 48
    1be4:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    1be8:	80 91 60 00 	lds	r24, 0x0060
    1bec:	83 33       	cpi	r24, 0x33	; 51
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <main+0x2fe>
		 {
		    //S2=0x78; // 90 degree
            //_delay_ms(1000);
		    forward_mm(300);
    1bf0:	8c e2       	ldi	r24, 0x2C	; 44
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			//_delay_ms(1000);
			//S2=0x7F; // 180 degree
			receive_data='0';
    1bf8:	80 e3       	ldi	r24, 0x30	; 48
    1bfa:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='4')
    1bfe:	80 91 60 00 	lds	r24, 0x0060
    1c02:	84 33       	cpi	r24, 0x34	; 52
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <main+0x314>
		 {
		    forward_mm(400);
    1c06:	80 e9       	ldi	r24, 0x90	; 144
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c0e:	80 e3       	ldi	r24, 0x30	; 48
    1c10:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='5')
    1c14:	80 91 60 00 	lds	r24, 0x0060
    1c18:	85 33       	cpi	r24, 0x35	; 53
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <main+0x32a>
		 {
		    forward_mm(500);
    1c1c:	84 ef       	ldi	r24, 0xF4	; 244
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='6')
    1c2a:	80 91 60 00 	lds	r24, 0x0060
    1c2e:	86 33       	cpi	r24, 0x36	; 54
    1c30:	39 f4       	brne	.+14     	; 0x1c40 <main+0x340>
		 {
		    forward_mm(600);
    1c32:	88 e5       	ldi	r24, 0x58	; 88
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c3a:	80 e3       	ldi	r24, 0x30	; 48
    1c3c:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='7')
    1c40:	80 91 60 00 	lds	r24, 0x0060
    1c44:	87 33       	cpi	r24, 0x37	; 55
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <main+0x356>
		 {
		    forward_mm(700);
    1c48:	8c eb       	ldi	r24, 0xBC	; 188
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='8')
    1c56:	80 91 60 00 	lds	r24, 0x0060
    1c5a:	88 33       	cpi	r24, 0x38	; 56
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <main+0x36c>
		 {
		    forward_mm(800);
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	93 e0       	ldi	r25, 0x03	; 3
    1c62:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c66:	80 e3       	ldi	r24, 0x30	; 48
    1c68:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='9')
    1c6c:	80 91 60 00 	lds	r24, 0x0060
    1c70:	89 33       	cpi	r24, 0x39	; 57
    1c72:	39 f4       	brne	.+14     	; 0x1c82 <main+0x382>
		 {
		    forward_mm(900);
    1c74:	84 e8       	ldi	r24, 0x84	; 132
    1c76:	93 e0       	ldi	r25, 0x03	; 3
    1c78:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }

	 }
	 if(color=='r'&&flag=='w'&&digit=='t')
    1c82:	80 91 9a 01 	lds	r24, 0x019A
    1c86:	82 37       	cpi	r24, 0x72	; 114
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <main+0x38c>
    1c8a:	6d c0       	rjmp	.+218    	; 0x1d66 <main+0x466>
    1c8c:	80 91 99 01 	lds	r24, 0x0199
    1c90:	87 37       	cpi	r24, 0x77	; 119
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <main+0x396>
    1c94:	68 c0       	rjmp	.+208    	; 0x1d66 <main+0x466>
    1c96:	80 91 96 01 	lds	r24, 0x0196
    1c9a:	84 37       	cpi	r24, 0x74	; 116
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <main+0x3a0>
    1c9e:	63 c0       	rjmp	.+198    	; 0x1d66 <main+0x466>
	 {
	     if(receive_data=='1')
    1ca0:	80 91 60 00 	lds	r24, 0x0060
    1ca4:	81 33       	cpi	r24, 0x31	; 49
    1ca6:	39 f4       	brne	.+14     	; 0x1cb6 <main+0x3b6>
		 {
		    forward_mm(11);
    1ca8:	8b e0       	ldi	r24, 0x0B	; 11
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1cb0:	80 e3       	ldi	r24, 0x30	; 48
    1cb2:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1cb6:	80 91 60 00 	lds	r24, 0x0060
    1cba:	82 33       	cpi	r24, 0x32	; 50
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <main+0x3cc>
		 {
		    forward_mm(20);
    1cbe:	84 e1       	ldi	r24, 0x14	; 20
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1cc6:	80 e3       	ldi	r24, 0x30	; 48
    1cc8:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    1ccc:	80 91 60 00 	lds	r24, 0x0060
    1cd0:	83 33       	cpi	r24, 0x33	; 51
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <main+0x3e2>
		 {
		    forward_mm(30);
    1cd4:	8e e1       	ldi	r24, 0x1E	; 30
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1cdc:	80 e3       	ldi	r24, 0x30	; 48
    1cde:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='4')
    1ce2:	80 91 60 00 	lds	r24, 0x0060
    1ce6:	84 33       	cpi	r24, 0x34	; 52
    1ce8:	39 f4       	brne	.+14     	; 0x1cf8 <main+0x3f8>
		 {
		    forward_mm(40);
    1cea:	88 e2       	ldi	r24, 0x28	; 40
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1cf2:	80 e3       	ldi	r24, 0x30	; 48
    1cf4:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='5')
    1cf8:	80 91 60 00 	lds	r24, 0x0060
    1cfc:	85 33       	cpi	r24, 0x35	; 53
    1cfe:	39 f4       	brne	.+14     	; 0x1d0e <main+0x40e>
		 {
		    forward_mm(50);
    1d00:	82 e3       	ldi	r24, 0x32	; 50
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1d08:	80 e3       	ldi	r24, 0x30	; 48
    1d0a:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='6')
    1d0e:	80 91 60 00 	lds	r24, 0x0060
    1d12:	86 33       	cpi	r24, 0x36	; 54
    1d14:	39 f4       	brne	.+14     	; 0x1d24 <main+0x424>
		 {
		    forward_mm(60);
    1d16:	8c e3       	ldi	r24, 0x3C	; 60
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1d1e:	80 e3       	ldi	r24, 0x30	; 48
    1d20:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='7')
    1d24:	80 91 60 00 	lds	r24, 0x0060
    1d28:	87 33       	cpi	r24, 0x37	; 55
    1d2a:	39 f4       	brne	.+14     	; 0x1d3a <main+0x43a>
		 {
		    forward_mm(70);
    1d2c:	86 e4       	ldi	r24, 0x46	; 70
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1d34:	80 e3       	ldi	r24, 0x30	; 48
    1d36:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='8')
    1d3a:	80 91 60 00 	lds	r24, 0x0060
    1d3e:	88 33       	cpi	r24, 0x38	; 56
    1d40:	39 f4       	brne	.+14     	; 0x1d50 <main+0x450>
		 {
		    forward_mm(80);
    1d42:	80 e5       	ldi	r24, 0x50	; 80
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1d4a:	80 e3       	ldi	r24, 0x30	; 48
    1d4c:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='9')
    1d50:	80 91 60 00 	lds	r24, 0x0060
    1d54:	89 33       	cpi	r24, 0x39	; 57
    1d56:	39 f4       	brne	.+14     	; 0x1d66 <main+0x466>
		 {
		    forward_mm(90);
    1d58:	8a e5       	ldi	r24, 0x5A	; 90
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <forward_mm>
			receive_data='0';
    1d60:	80 e3       	ldi	r24, 0x30	; 48
    1d62:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }

	 }
     if(color=='r'&&flag=='s'&&digit=='h')
    1d66:	80 91 9a 01 	lds	r24, 0x019A
    1d6a:	82 37       	cpi	r24, 0x72	; 114
    1d6c:	99 f4       	brne	.+38     	; 0x1d94 <main+0x494>
    1d6e:	80 91 99 01 	lds	r24, 0x0199
    1d72:	83 37       	cpi	r24, 0x73	; 115
    1d74:	79 f4       	brne	.+30     	; 0x1d94 <main+0x494>
    1d76:	80 91 96 01 	lds	r24, 0x0196
    1d7a:	88 36       	cpi	r24, 0x68	; 104
    1d7c:	59 f4       	brne	.+22     	; 0x1d94 <main+0x494>
	 {
	     if(receive_data=='1')
    1d7e:	80 91 60 00 	lds	r24, 0x0060
    1d82:	81 33       	cpi	r24, 0x31	; 49
    1d84:	39 f4       	brne	.+14     	; 0x1d94 <main+0x494>
		 {
		    back_mm(170);
    1d86:	8a ea       	ldi	r24, 0xAA	; 170
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <back_mm>
			receive_data='0';
    1d8e:	80 e3       	ldi	r24, 0x30	; 48
    1d90:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
     }
     if(color=='r'&&flag=='a'&&digit=='t')
    1d94:	80 91 9a 01 	lds	r24, 0x019A
    1d98:	82 37       	cpi	r24, 0x72	; 114
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <main+0x49e>
    1d9c:	6d c0       	rjmp	.+218    	; 0x1e78 <main+0x578>
    1d9e:	80 91 99 01 	lds	r24, 0x0199
    1da2:	81 36       	cpi	r24, 0x61	; 97
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <main+0x4a8>
    1da6:	68 c0       	rjmp	.+208    	; 0x1e78 <main+0x578>
    1da8:	80 91 96 01 	lds	r24, 0x0196
    1dac:	84 37       	cpi	r24, 0x74	; 116
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <main+0x4b2>
    1db0:	63 c0       	rjmp	.+198    	; 0x1e78 <main+0x578>
	 {
	     if(receive_data=='1')
    1db2:	80 91 60 00 	lds	r24, 0x0060
    1db6:	81 33       	cpi	r24, 0x31	; 49
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <main+0x4c8>
		 {
		    left_degrees(10);
    1dba:	8a e0       	ldi	r24, 0x0A	; 10
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1dc2:	80 e3       	ldi	r24, 0x30	; 48
    1dc4:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1dc8:	80 91 60 00 	lds	r24, 0x0060
    1dcc:	82 33       	cpi	r24, 0x32	; 50
    1dce:	39 f4       	brne	.+14     	; 0x1dde <main+0x4de>
		 {
		    left_degrees(20);
    1dd0:	84 e1       	ldi	r24, 0x14	; 20
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1dd8:	80 e3       	ldi	r24, 0x30	; 48
    1dda:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    1dde:	80 91 60 00 	lds	r24, 0x0060
    1de2:	83 33       	cpi	r24, 0x33	; 51
    1de4:	39 f4       	brne	.+14     	; 0x1df4 <main+0x4f4>
		 {
		    left_degrees(30);
    1de6:	8e e1       	ldi	r24, 0x1E	; 30
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1dee:	80 e3       	ldi	r24, 0x30	; 48
    1df0:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='4')
    1df4:	80 91 60 00 	lds	r24, 0x0060
    1df8:	84 33       	cpi	r24, 0x34	; 52
    1dfa:	39 f4       	brne	.+14     	; 0x1e0a <main+0x50a>
		 {
		    left_degrees(40);
    1dfc:	88 e2       	ldi	r24, 0x28	; 40
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e04:	80 e3       	ldi	r24, 0x30	; 48
    1e06:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='5')
    1e0a:	80 91 60 00 	lds	r24, 0x0060
    1e0e:	85 33       	cpi	r24, 0x35	; 53
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <main+0x520>
		 {
		    left_degrees(50);
    1e12:	82 e3       	ldi	r24, 0x32	; 50
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e1a:	80 e3       	ldi	r24, 0x30	; 48
    1e1c:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='6')
    1e20:	80 91 60 00 	lds	r24, 0x0060
    1e24:	86 33       	cpi	r24, 0x36	; 54
    1e26:	39 f4       	brne	.+14     	; 0x1e36 <main+0x536>
		 {
		    left_degrees(60);
    1e28:	8c e3       	ldi	r24, 0x3C	; 60
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e30:	80 e3       	ldi	r24, 0x30	; 48
    1e32:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='7')
    1e36:	80 91 60 00 	lds	r24, 0x0060
    1e3a:	87 33       	cpi	r24, 0x37	; 55
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <main+0x54c>
		 {
		    left_degrees(70);
    1e3e:	86 e4       	ldi	r24, 0x46	; 70
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e46:	80 e3       	ldi	r24, 0x30	; 48
    1e48:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='8')
    1e4c:	80 91 60 00 	lds	r24, 0x0060
    1e50:	88 33       	cpi	r24, 0x38	; 56
    1e52:	39 f4       	brne	.+14     	; 0x1e62 <main+0x562>
		 {
		    left_degrees(80);
    1e54:	80 e5       	ldi	r24, 0x50	; 80
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e5c:	80 e3       	ldi	r24, 0x30	; 48
    1e5e:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
         if(receive_data=='9')
    1e62:	80 91 60 00 	lds	r24, 0x0060
    1e66:	89 33       	cpi	r24, 0x39	; 57
    1e68:	39 f4       	brne	.+14     	; 0x1e78 <main+0x578>
		 {
		    left_degrees(90);
    1e6a:	8a e5       	ldi	r24, 0x5A	; 90
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1e72:	80 e3       	ldi	r24, 0x30	; 48
    1e74:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
	 }
	 if(color=='r'&&flag=='a'&&digit=='h')
    1e78:	80 91 9a 01 	lds	r24, 0x019A
    1e7c:	82 37       	cpi	r24, 0x72	; 114
    1e7e:	49 f5       	brne	.+82     	; 0x1ed2 <main+0x5d2>
    1e80:	80 91 99 01 	lds	r24, 0x0199
    1e84:	81 36       	cpi	r24, 0x61	; 97
    1e86:	29 f5       	brne	.+74     	; 0x1ed2 <main+0x5d2>
    1e88:	80 91 96 01 	lds	r24, 0x0196
    1e8c:	88 36       	cpi	r24, 0x68	; 104
    1e8e:	09 f5       	brne	.+66     	; 0x1ed2 <main+0x5d2>
	 {
	     if(receive_data=='1')
    1e90:	80 91 60 00 	lds	r24, 0x0060
    1e94:	81 33       	cpi	r24, 0x31	; 49
    1e96:	39 f4       	brne	.+14     	; 0x1ea6 <main+0x5a6>
		 {
		    left_degrees(100);
    1e98:	84 e6       	ldi	r24, 0x64	; 100
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1ea6:	80 91 60 00 	lds	r24, 0x0060
    1eaa:	82 33       	cpi	r24, 0x32	; 50
    1eac:	39 f4       	brne	.+14     	; 0x1ebc <main+0x5bc>
		 {
		    left_degrees(200);
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1eb6:	80 e3       	ldi	r24, 0x30	; 48
    1eb8:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    1ebc:	80 91 60 00 	lds	r24, 0x0060
    1ec0:	83 33       	cpi	r24, 0x33	; 51
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <main+0x5d2>
		 {
		    left_degrees(300);
    1ec4:	8c e2       	ldi	r24, 0x2C	; 44
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	0e 94 04 0c 	call	0x1808	; 0x1808 <left_degrees>
			receive_data='0';
    1ecc:	80 e3       	ldi	r24, 0x30	; 48
    1ece:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
	 }
	 if(color=='r'&&flag=='d'&&digit=='t')
    1ed2:	80 91 9a 01 	lds	r24, 0x019A
    1ed6:	82 37       	cpi	r24, 0x72	; 114
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <main+0x5dc>
    1eda:	6d c0       	rjmp	.+218    	; 0x1fb6 <main+0x6b6>
    1edc:	80 91 99 01 	lds	r24, 0x0199
    1ee0:	84 36       	cpi	r24, 0x64	; 100
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <main+0x5e6>
    1ee4:	68 c0       	rjmp	.+208    	; 0x1fb6 <main+0x6b6>
    1ee6:	80 91 96 01 	lds	r24, 0x0196
    1eea:	84 37       	cpi	r24, 0x74	; 116
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <main+0x5f0>
    1eee:	63 c0       	rjmp	.+198    	; 0x1fb6 <main+0x6b6>
	 {
	     if(receive_data=='1')
    1ef0:	80 91 60 00 	lds	r24, 0x0060
    1ef4:	81 33       	cpi	r24, 0x31	; 49
    1ef6:	39 f4       	brne	.+14     	; 0x1f06 <main+0x606>
		 {
		    right_degrees(10);
    1ef8:	8a e0       	ldi	r24, 0x0A	; 10
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1f06:	80 91 60 00 	lds	r24, 0x0060
    1f0a:	82 33       	cpi	r24, 0x32	; 50
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <main+0x61c>
		 {
		    right_degrees(20);
    1f0e:	84 e1       	ldi	r24, 0x14	; 20
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f16:	80 e3       	ldi	r24, 0x30	; 48
    1f18:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    1f1c:	80 91 60 00 	lds	r24, 0x0060
    1f20:	83 33       	cpi	r24, 0x33	; 51
    1f22:	39 f4       	brne	.+14     	; 0x1f32 <main+0x632>
		 {
		    right_degrees(30);
    1f24:	8e e1       	ldi	r24, 0x1E	; 30
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f2c:	80 e3       	ldi	r24, 0x30	; 48
    1f2e:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='4')
    1f32:	80 91 60 00 	lds	r24, 0x0060
    1f36:	84 33       	cpi	r24, 0x34	; 52
    1f38:	39 f4       	brne	.+14     	; 0x1f48 <main+0x648>
		 {
		    right_degrees(40);
    1f3a:	88 e2       	ldi	r24, 0x28	; 40
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f42:	80 e3       	ldi	r24, 0x30	; 48
    1f44:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='5')
    1f48:	80 91 60 00 	lds	r24, 0x0060
    1f4c:	85 33       	cpi	r24, 0x35	; 53
    1f4e:	39 f4       	brne	.+14     	; 0x1f5e <main+0x65e>
		 {
		    right_degrees(50);
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f58:	80 e3       	ldi	r24, 0x30	; 48
    1f5a:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='6')
    1f5e:	80 91 60 00 	lds	r24, 0x0060
    1f62:	86 33       	cpi	r24, 0x36	; 54
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <main+0x674>
		 {
		    right_degrees(60);
    1f66:	8c e3       	ldi	r24, 0x3C	; 60
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f6e:	80 e3       	ldi	r24, 0x30	; 48
    1f70:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='7')
    1f74:	80 91 60 00 	lds	r24, 0x0060
    1f78:	87 33       	cpi	r24, 0x37	; 55
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <main+0x68a>
		 {
		    right_degrees(70);
    1f7c:	86 e4       	ldi	r24, 0x46	; 70
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f84:	80 e3       	ldi	r24, 0x30	; 48
    1f86:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='8')
    1f8a:	80 91 60 00 	lds	r24, 0x0060
    1f8e:	88 33       	cpi	r24, 0x38	; 56
    1f90:	39 f4       	brne	.+14     	; 0x1fa0 <main+0x6a0>
		 {
		    right_degrees(80);
    1f92:	80 e5       	ldi	r24, 0x50	; 80
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1f9a:	80 e3       	ldi	r24, 0x30	; 48
    1f9c:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
         if(receive_data=='9')
    1fa0:	80 91 60 00 	lds	r24, 0x0060
    1fa4:	89 33       	cpi	r24, 0x39	; 57
    1fa6:	39 f4       	brne	.+14     	; 0x1fb6 <main+0x6b6>
		 {
		    right_degrees(90);
    1fa8:	8a e5       	ldi	r24, 0x5A	; 90
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1fb0:	80 e3       	ldi	r24, 0x30	; 48
    1fb2:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
	 }
	 if(color=='r'&&flag=='d'&&digit=='h')
    1fb6:	80 91 9a 01 	lds	r24, 0x019A
    1fba:	82 37       	cpi	r24, 0x72	; 114
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <main+0x6c0>
    1fbe:	ac cc       	rjmp	.-1704   	; 0x1918 <main+0x18>
    1fc0:	80 91 99 01 	lds	r24, 0x0199
    1fc4:	84 36       	cpi	r24, 0x64	; 100
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <main+0x6ca>
    1fc8:	a7 cc       	rjmp	.-1714   	; 0x1918 <main+0x18>
    1fca:	80 91 96 01 	lds	r24, 0x0196
    1fce:	88 36       	cpi	r24, 0x68	; 104
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <main+0x6d4>
    1fd2:	a2 cc       	rjmp	.-1724   	; 0x1918 <main+0x18>
	 {
	     if(receive_data=='1')
    1fd4:	80 91 60 00 	lds	r24, 0x0060
    1fd8:	81 33       	cpi	r24, 0x31	; 49
    1fda:	39 f4       	brne	.+14     	; 0x1fea <main+0x6ea>
		 {
		    right_degrees(100);
    1fdc:	84 e6       	ldi	r24, 0x64	; 100
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1fe4:	80 e3       	ldi	r24, 0x30	; 48
    1fe6:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='2')
    1fea:	80 91 60 00 	lds	r24, 0x0060
    1fee:	82 33       	cpi	r24, 0x32	; 50
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <main+0x700>
		 {
		    right_degrees(200);
    1ff2:	88 ec       	ldi	r24, 0xC8	; 200
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	80 93 60 00 	sts	0x0060, r24
			//UDR='x';
		 }
		 if(receive_data=='3')
    2000:	80 91 60 00 	lds	r24, 0x0060
    2004:	83 33       	cpi	r24, 0x33	; 51
    2006:	09 f0       	breq	.+2      	; 0x200a <main+0x70a>
    2008:	87 cc       	rjmp	.-1778   	; 0x1918 <main+0x18>
		 {
		    right_degrees(300);
    200a:	8c e2       	ldi	r24, 0x2C	; 44
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <right_degrees>
			receive_data='0';
    2012:	80 e3       	ldi	r24, 0x30	; 48
    2014:	80 93 60 00 	sts	0x0060, r24
    2018:	7f cc       	rjmp	.-1794   	; 0x1918 <main+0x18>

0000201a <__fixunssfsi>:
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	7b 01       	movw	r14, r22
    2024:	8c 01       	movw	r16, r24
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	5f e4       	ldi	r21, 0x4F	; 79
    202e:	0e 94 b9 13 	call	0x2772	; 0x2772 <__gesf2>
    2032:	88 23       	and	r24, r24
    2034:	8c f0       	brlt	.+34     	; 0x2058 <__fixunssfsi+0x3e>
    2036:	c8 01       	movw	r24, r16
    2038:	b7 01       	movw	r22, r14
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	5f e4       	ldi	r21, 0x4F	; 79
    2042:	0e 94 85 11 	call	0x230a	; 0x230a <__subsf3>
    2046:	0e 94 19 14 	call	0x2832	; 0x2832 <__fixsfsi>
    204a:	9b 01       	movw	r18, r22
    204c:	ac 01       	movw	r20, r24
    204e:	20 50       	subi	r18, 0x00	; 0
    2050:	30 40       	sbci	r19, 0x00	; 0
    2052:	40 40       	sbci	r20, 0x00	; 0
    2054:	50 48       	sbci	r21, 0x80	; 128
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <__fixunssfsi+0x4a>
    2058:	c8 01       	movw	r24, r16
    205a:	b7 01       	movw	r22, r14
    205c:	0e 94 19 14 	call	0x2832	; 0x2832 <__fixsfsi>
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	b9 01       	movw	r22, r18
    2066:	ca 01       	movw	r24, r20
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	08 95       	ret

00002072 <_fpadd_parts>:
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ef e3       	ldi	r30, 0x3F	; 63
    2078:	f0 e1       	ldi	r31, 0x10	; 16
    207a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__>
    207e:	dc 01       	movw	r26, r24
    2080:	2b 01       	movw	r4, r22
    2082:	fa 01       	movw	r30, r20
    2084:	9c 91       	ld	r25, X
    2086:	92 30       	cpi	r25, 0x02	; 2
    2088:	08 f4       	brcc	.+2      	; 0x208c <_fpadd_parts+0x1a>
    208a:	39 c1       	rjmp	.+626    	; 0x22fe <_fpadd_parts+0x28c>
    208c:	eb 01       	movw	r28, r22
    208e:	88 81       	ld	r24, Y
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	08 f4       	brcc	.+2      	; 0x2096 <_fpadd_parts+0x24>
    2094:	33 c1       	rjmp	.+614    	; 0x22fc <_fpadd_parts+0x28a>
    2096:	94 30       	cpi	r25, 0x04	; 4
    2098:	69 f4       	brne	.+26     	; 0x20b4 <_fpadd_parts+0x42>
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	09 f0       	breq	.+2      	; 0x20a0 <_fpadd_parts+0x2e>
    209e:	2f c1       	rjmp	.+606    	; 0x22fe <_fpadd_parts+0x28c>
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	9c 91       	ld	r25, X
    20a4:	11 97       	sbiw	r26, 0x01	; 1
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	98 17       	cp	r25, r24
    20aa:	09 f4       	brne	.+2      	; 0x20ae <_fpadd_parts+0x3c>
    20ac:	28 c1       	rjmp	.+592    	; 0x22fe <_fpadd_parts+0x28c>
    20ae:	a4 e8       	ldi	r26, 0x84	; 132
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	25 c1       	rjmp	.+586    	; 0x22fe <_fpadd_parts+0x28c>
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	09 f4       	brne	.+2      	; 0x20ba <_fpadd_parts+0x48>
    20b8:	21 c1       	rjmp	.+578    	; 0x22fc <_fpadd_parts+0x28a>
    20ba:	82 30       	cpi	r24, 0x02	; 2
    20bc:	a9 f4       	brne	.+42     	; 0x20e8 <_fpadd_parts+0x76>
    20be:	92 30       	cpi	r25, 0x02	; 2
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <_fpadd_parts+0x52>
    20c2:	1d c1       	rjmp	.+570    	; 0x22fe <_fpadd_parts+0x28c>
    20c4:	9a 01       	movw	r18, r20
    20c6:	ad 01       	movw	r20, r26
    20c8:	88 e0       	ldi	r24, 0x08	; 8
    20ca:	ea 01       	movw	r28, r20
    20cc:	09 90       	ld	r0, Y+
    20ce:	ae 01       	movw	r20, r28
    20d0:	e9 01       	movw	r28, r18
    20d2:	09 92       	st	Y+, r0
    20d4:	9e 01       	movw	r18, r28
    20d6:	81 50       	subi	r24, 0x01	; 1
    20d8:	c1 f7       	brne	.-16     	; 0x20ca <_fpadd_parts+0x58>
    20da:	e2 01       	movw	r28, r4
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	11 96       	adiw	r26, 0x01	; 1
    20e0:	9c 91       	ld	r25, X
    20e2:	89 23       	and	r24, r25
    20e4:	81 83       	std	Z+1, r24	; 0x01
    20e6:	08 c1       	rjmp	.+528    	; 0x22f8 <_fpadd_parts+0x286>
    20e8:	92 30       	cpi	r25, 0x02	; 2
    20ea:	09 f4       	brne	.+2      	; 0x20ee <_fpadd_parts+0x7c>
    20ec:	07 c1       	rjmp	.+526    	; 0x22fc <_fpadd_parts+0x28a>
    20ee:	12 96       	adiw	r26, 0x02	; 2
    20f0:	2d 90       	ld	r2, X+
    20f2:	3c 90       	ld	r3, X
    20f4:	13 97       	sbiw	r26, 0x03	; 3
    20f6:	eb 01       	movw	r28, r22
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	14 96       	adiw	r26, 0x04	; 4
    20fe:	ad 90       	ld	r10, X+
    2100:	bd 90       	ld	r11, X+
    2102:	cd 90       	ld	r12, X+
    2104:	dc 90       	ld	r13, X
    2106:	17 97       	sbiw	r26, 0x07	; 7
    2108:	ec 80       	ldd	r14, Y+4	; 0x04
    210a:	fd 80       	ldd	r15, Y+5	; 0x05
    210c:	0e 81       	ldd	r16, Y+6	; 0x06
    210e:	1f 81       	ldd	r17, Y+7	; 0x07
    2110:	91 01       	movw	r18, r2
    2112:	28 1b       	sub	r18, r24
    2114:	39 0b       	sbc	r19, r25
    2116:	b9 01       	movw	r22, r18
    2118:	37 ff       	sbrs	r19, 7
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <_fpadd_parts+0xb2>
    211c:	66 27       	eor	r22, r22
    211e:	77 27       	eor	r23, r23
    2120:	62 1b       	sub	r22, r18
    2122:	73 0b       	sbc	r23, r19
    2124:	60 32       	cpi	r22, 0x20	; 32
    2126:	71 05       	cpc	r23, r1
    2128:	0c f0       	brlt	.+2      	; 0x212c <_fpadd_parts+0xba>
    212a:	61 c0       	rjmp	.+194    	; 0x21ee <_fpadd_parts+0x17c>
    212c:	12 16       	cp	r1, r18
    212e:	13 06       	cpc	r1, r19
    2130:	6c f5       	brge	.+90     	; 0x218c <_fpadd_parts+0x11a>
    2132:	37 01       	movw	r6, r14
    2134:	48 01       	movw	r8, r16
    2136:	06 2e       	mov	r0, r22
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <_fpadd_parts+0xd0>
    213a:	96 94       	lsr	r9
    213c:	87 94       	ror	r8
    213e:	77 94       	ror	r7
    2140:	67 94       	ror	r6
    2142:	0a 94       	dec	r0
    2144:	d2 f7       	brpl	.-12     	; 0x213a <_fpadd_parts+0xc8>
    2146:	21 e0       	ldi	r18, 0x01	; 1
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <_fpadd_parts+0xe6>
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	44 1f       	adc	r20, r20
    2156:	55 1f       	adc	r21, r21
    2158:	6a 95       	dec	r22
    215a:	d2 f7       	brpl	.-12     	; 0x2150 <_fpadd_parts+0xde>
    215c:	21 50       	subi	r18, 0x01	; 1
    215e:	30 40       	sbci	r19, 0x00	; 0
    2160:	40 40       	sbci	r20, 0x00	; 0
    2162:	50 40       	sbci	r21, 0x00	; 0
    2164:	2e 21       	and	r18, r14
    2166:	3f 21       	and	r19, r15
    2168:	40 23       	and	r20, r16
    216a:	51 23       	and	r21, r17
    216c:	21 15       	cp	r18, r1
    216e:	31 05       	cpc	r19, r1
    2170:	41 05       	cpc	r20, r1
    2172:	51 05       	cpc	r21, r1
    2174:	21 f0       	breq	.+8      	; 0x217e <_fpadd_parts+0x10c>
    2176:	21 e0       	ldi	r18, 0x01	; 1
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	79 01       	movw	r14, r18
    2180:	8a 01       	movw	r16, r20
    2182:	e6 28       	or	r14, r6
    2184:	f7 28       	or	r15, r7
    2186:	08 29       	or	r16, r8
    2188:	19 29       	or	r17, r9
    218a:	3c c0       	rjmp	.+120    	; 0x2204 <_fpadd_parts+0x192>
    218c:	23 2b       	or	r18, r19
    218e:	d1 f1       	breq	.+116    	; 0x2204 <_fpadd_parts+0x192>
    2190:	26 0e       	add	r2, r22
    2192:	37 1e       	adc	r3, r23
    2194:	35 01       	movw	r6, r10
    2196:	46 01       	movw	r8, r12
    2198:	06 2e       	mov	r0, r22
    219a:	04 c0       	rjmp	.+8      	; 0x21a4 <_fpadd_parts+0x132>
    219c:	96 94       	lsr	r9
    219e:	87 94       	ror	r8
    21a0:	77 94       	ror	r7
    21a2:	67 94       	ror	r6
    21a4:	0a 94       	dec	r0
    21a6:	d2 f7       	brpl	.-12     	; 0x219c <_fpadd_parts+0x12a>
    21a8:	21 e0       	ldi	r18, 0x01	; 1
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	04 c0       	rjmp	.+8      	; 0x21ba <_fpadd_parts+0x148>
    21b2:	22 0f       	add	r18, r18
    21b4:	33 1f       	adc	r19, r19
    21b6:	44 1f       	adc	r20, r20
    21b8:	55 1f       	adc	r21, r21
    21ba:	6a 95       	dec	r22
    21bc:	d2 f7       	brpl	.-12     	; 0x21b2 <_fpadd_parts+0x140>
    21be:	21 50       	subi	r18, 0x01	; 1
    21c0:	30 40       	sbci	r19, 0x00	; 0
    21c2:	40 40       	sbci	r20, 0x00	; 0
    21c4:	50 40       	sbci	r21, 0x00	; 0
    21c6:	2a 21       	and	r18, r10
    21c8:	3b 21       	and	r19, r11
    21ca:	4c 21       	and	r20, r12
    21cc:	5d 21       	and	r21, r13
    21ce:	21 15       	cp	r18, r1
    21d0:	31 05       	cpc	r19, r1
    21d2:	41 05       	cpc	r20, r1
    21d4:	51 05       	cpc	r21, r1
    21d6:	21 f0       	breq	.+8      	; 0x21e0 <_fpadd_parts+0x16e>
    21d8:	21 e0       	ldi	r18, 0x01	; 1
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	59 01       	movw	r10, r18
    21e2:	6a 01       	movw	r12, r20
    21e4:	a6 28       	or	r10, r6
    21e6:	b7 28       	or	r11, r7
    21e8:	c8 28       	or	r12, r8
    21ea:	d9 28       	or	r13, r9
    21ec:	0b c0       	rjmp	.+22     	; 0x2204 <_fpadd_parts+0x192>
    21ee:	82 15       	cp	r24, r2
    21f0:	93 05       	cpc	r25, r3
    21f2:	2c f0       	brlt	.+10     	; 0x21fe <_fpadd_parts+0x18c>
    21f4:	1c 01       	movw	r2, r24
    21f6:	aa 24       	eor	r10, r10
    21f8:	bb 24       	eor	r11, r11
    21fa:	65 01       	movw	r12, r10
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <_fpadd_parts+0x192>
    21fe:	ee 24       	eor	r14, r14
    2200:	ff 24       	eor	r15, r15
    2202:	87 01       	movw	r16, r14
    2204:	11 96       	adiw	r26, 0x01	; 1
    2206:	9c 91       	ld	r25, X
    2208:	d2 01       	movw	r26, r4
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	8c 91       	ld	r24, X
    220e:	98 17       	cp	r25, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <_fpadd_parts+0x1a2>
    2212:	45 c0       	rjmp	.+138    	; 0x229e <_fpadd_parts+0x22c>
    2214:	99 23       	and	r25, r25
    2216:	39 f0       	breq	.+14     	; 0x2226 <_fpadd_parts+0x1b4>
    2218:	a8 01       	movw	r20, r16
    221a:	97 01       	movw	r18, r14
    221c:	2a 19       	sub	r18, r10
    221e:	3b 09       	sbc	r19, r11
    2220:	4c 09       	sbc	r20, r12
    2222:	5d 09       	sbc	r21, r13
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <_fpadd_parts+0x1c0>
    2226:	a6 01       	movw	r20, r12
    2228:	95 01       	movw	r18, r10
    222a:	2e 19       	sub	r18, r14
    222c:	3f 09       	sbc	r19, r15
    222e:	40 0b       	sbc	r20, r16
    2230:	51 0b       	sbc	r21, r17
    2232:	57 fd       	sbrc	r21, 7
    2234:	08 c0       	rjmp	.+16     	; 0x2246 <_fpadd_parts+0x1d4>
    2236:	11 82       	std	Z+1, r1	; 0x01
    2238:	33 82       	std	Z+3, r3	; 0x03
    223a:	22 82       	std	Z+2, r2	; 0x02
    223c:	24 83       	std	Z+4, r18	; 0x04
    223e:	35 83       	std	Z+5, r19	; 0x05
    2240:	46 83       	std	Z+6, r20	; 0x06
    2242:	57 83       	std	Z+7, r21	; 0x07
    2244:	1d c0       	rjmp	.+58     	; 0x2280 <_fpadd_parts+0x20e>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	81 83       	std	Z+1, r24	; 0x01
    224a:	33 82       	std	Z+3, r3	; 0x03
    224c:	22 82       	std	Z+2, r2	; 0x02
    224e:	88 27       	eor	r24, r24
    2250:	99 27       	eor	r25, r25
    2252:	dc 01       	movw	r26, r24
    2254:	82 1b       	sub	r24, r18
    2256:	93 0b       	sbc	r25, r19
    2258:	a4 0b       	sbc	r26, r20
    225a:	b5 0b       	sbc	r27, r21
    225c:	84 83       	std	Z+4, r24	; 0x04
    225e:	95 83       	std	Z+5, r25	; 0x05
    2260:	a6 83       	std	Z+6, r26	; 0x06
    2262:	b7 83       	std	Z+7, r27	; 0x07
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <_fpadd_parts+0x20e>
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	44 1f       	adc	r20, r20
    226c:	55 1f       	adc	r21, r21
    226e:	24 83       	std	Z+4, r18	; 0x04
    2270:	35 83       	std	Z+5, r19	; 0x05
    2272:	46 83       	std	Z+6, r20	; 0x06
    2274:	57 83       	std	Z+7, r21	; 0x07
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	93 83       	std	Z+3, r25	; 0x03
    227e:	82 83       	std	Z+2, r24	; 0x02
    2280:	24 81       	ldd	r18, Z+4	; 0x04
    2282:	35 81       	ldd	r19, Z+5	; 0x05
    2284:	46 81       	ldd	r20, Z+6	; 0x06
    2286:	57 81       	ldd	r21, Z+7	; 0x07
    2288:	da 01       	movw	r26, r20
    228a:	c9 01       	movw	r24, r18
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	a1 09       	sbc	r26, r1
    2290:	b1 09       	sbc	r27, r1
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	af 4f       	sbci	r26, 0xFF	; 255
    2298:	bf 43       	sbci	r27, 0x3F	; 63
    229a:	28 f3       	brcs	.-54     	; 0x2266 <_fpadd_parts+0x1f4>
    229c:	0b c0       	rjmp	.+22     	; 0x22b4 <_fpadd_parts+0x242>
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	33 82       	std	Z+3, r3	; 0x03
    22a2:	22 82       	std	Z+2, r2	; 0x02
    22a4:	ea 0c       	add	r14, r10
    22a6:	fb 1c       	adc	r15, r11
    22a8:	0c 1d       	adc	r16, r12
    22aa:	1d 1d       	adc	r17, r13
    22ac:	e4 82       	std	Z+4, r14	; 0x04
    22ae:	f5 82       	std	Z+5, r15	; 0x05
    22b0:	06 83       	std	Z+6, r16	; 0x06
    22b2:	17 83       	std	Z+7, r17	; 0x07
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	80 83       	st	Z, r24
    22b8:	24 81       	ldd	r18, Z+4	; 0x04
    22ba:	35 81       	ldd	r19, Z+5	; 0x05
    22bc:	46 81       	ldd	r20, Z+6	; 0x06
    22be:	57 81       	ldd	r21, Z+7	; 0x07
    22c0:	57 ff       	sbrs	r21, 7
    22c2:	1a c0       	rjmp	.+52     	; 0x22f8 <_fpadd_parts+0x286>
    22c4:	c9 01       	movw	r24, r18
    22c6:	aa 27       	eor	r26, r26
    22c8:	97 fd       	sbrc	r25, 7
    22ca:	a0 95       	com	r26
    22cc:	ba 2f       	mov	r27, r26
    22ce:	81 70       	andi	r24, 0x01	; 1
    22d0:	90 70       	andi	r25, 0x00	; 0
    22d2:	a0 70       	andi	r26, 0x00	; 0
    22d4:	b0 70       	andi	r27, 0x00	; 0
    22d6:	56 95       	lsr	r21
    22d8:	47 95       	ror	r20
    22da:	37 95       	ror	r19
    22dc:	27 95       	ror	r18
    22de:	82 2b       	or	r24, r18
    22e0:	93 2b       	or	r25, r19
    22e2:	a4 2b       	or	r26, r20
    22e4:	b5 2b       	or	r27, r21
    22e6:	84 83       	std	Z+4, r24	; 0x04
    22e8:	95 83       	std	Z+5, r25	; 0x05
    22ea:	a6 83       	std	Z+6, r26	; 0x06
    22ec:	b7 83       	std	Z+7, r27	; 0x07
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	01 96       	adiw	r24, 0x01	; 1
    22f4:	93 83       	std	Z+3, r25	; 0x03
    22f6:	82 83       	std	Z+2, r24	; 0x02
    22f8:	df 01       	movw	r26, r30
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <_fpadd_parts+0x28c>
    22fc:	d2 01       	movw	r26, r4
    22fe:	cd 01       	movw	r24, r26
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	e2 e1       	ldi	r30, 0x12	; 18
    2306:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__>

0000230a <__subsf3>:
    230a:	a0 e2       	ldi	r26, 0x20	; 32
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	eb e8       	ldi	r30, 0x8B	; 139
    2310:	f1 e1       	ldi	r31, 0x11	; 17
    2312:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x18>
    2316:	69 83       	std	Y+1, r22	; 0x01
    2318:	7a 83       	std	Y+2, r23	; 0x02
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	2d 83       	std	Y+5, r18	; 0x05
    2320:	3e 83       	std	Y+6, r19	; 0x06
    2322:	4f 83       	std	Y+7, r20	; 0x07
    2324:	58 87       	std	Y+8, r21	; 0x08
    2326:	e9 e0       	ldi	r30, 0x09	; 9
    2328:	ee 2e       	mov	r14, r30
    232a:	f1 2c       	mov	r15, r1
    232c:	ec 0e       	add	r14, r28
    232e:	fd 1e       	adc	r15, r29
    2330:	ce 01       	movw	r24, r28
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	b7 01       	movw	r22, r14
    2336:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    233a:	8e 01       	movw	r16, r28
    233c:	0f 5e       	subi	r16, 0xEF	; 239
    233e:	1f 4f       	sbci	r17, 0xFF	; 255
    2340:	ce 01       	movw	r24, r28
    2342:	05 96       	adiw	r24, 0x05	; 5
    2344:	b8 01       	movw	r22, r16
    2346:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    234a:	8a 89       	ldd	r24, Y+18	; 0x12
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	89 27       	eor	r24, r25
    2350:	8a 8b       	std	Y+18, r24	; 0x12
    2352:	c7 01       	movw	r24, r14
    2354:	b8 01       	movw	r22, r16
    2356:	ae 01       	movw	r20, r28
    2358:	47 5e       	subi	r20, 0xE7	; 231
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	0e 94 39 10 	call	0x2072	; 0x2072 <_fpadd_parts>
    2360:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__pack_f>
    2364:	a0 96       	adiw	r28, 0x20	; 32
    2366:	e6 e0       	ldi	r30, 0x06	; 6
    2368:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x18>

0000236c <__addsf3>:
    236c:	a0 e2       	ldi	r26, 0x20	; 32
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ec eb       	ldi	r30, 0xBC	; 188
    2372:	f1 e1       	ldi	r31, 0x11	; 17
    2374:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x18>
    2378:	69 83       	std	Y+1, r22	; 0x01
    237a:	7a 83       	std	Y+2, r23	; 0x02
    237c:	8b 83       	std	Y+3, r24	; 0x03
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	2d 83       	std	Y+5, r18	; 0x05
    2382:	3e 83       	std	Y+6, r19	; 0x06
    2384:	4f 83       	std	Y+7, r20	; 0x07
    2386:	58 87       	std	Y+8, r21	; 0x08
    2388:	f9 e0       	ldi	r31, 0x09	; 9
    238a:	ef 2e       	mov	r14, r31
    238c:	f1 2c       	mov	r15, r1
    238e:	ec 0e       	add	r14, r28
    2390:	fd 1e       	adc	r15, r29
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	b7 01       	movw	r22, r14
    2398:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    239c:	8e 01       	movw	r16, r28
    239e:	0f 5e       	subi	r16, 0xEF	; 239
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	ce 01       	movw	r24, r28
    23a4:	05 96       	adiw	r24, 0x05	; 5
    23a6:	b8 01       	movw	r22, r16
    23a8:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    23ac:	c7 01       	movw	r24, r14
    23ae:	b8 01       	movw	r22, r16
    23b0:	ae 01       	movw	r20, r28
    23b2:	47 5e       	subi	r20, 0xE7	; 231
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	0e 94 39 10 	call	0x2072	; 0x2072 <_fpadd_parts>
    23ba:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__pack_f>
    23be:	a0 96       	adiw	r28, 0x20	; 32
    23c0:	e6 e0       	ldi	r30, 0x06	; 6
    23c2:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x18>

000023c6 <__mulsf3>:
    23c6:	a0 e2       	ldi	r26, 0x20	; 32
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 ee       	ldi	r30, 0xE9	; 233
    23cc:	f1 e1       	ldi	r31, 0x11	; 17
    23ce:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__>
    23d2:	69 83       	std	Y+1, r22	; 0x01
    23d4:	7a 83       	std	Y+2, r23	; 0x02
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	2d 83       	std	Y+5, r18	; 0x05
    23dc:	3e 83       	std	Y+6, r19	; 0x06
    23de:	4f 83       	std	Y+7, r20	; 0x07
    23e0:	58 87       	std	Y+8, r21	; 0x08
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	be 01       	movw	r22, r28
    23e8:	67 5f       	subi	r22, 0xF7	; 247
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    23f0:	ce 01       	movw	r24, r28
    23f2:	05 96       	adiw	r24, 0x05	; 5
    23f4:	be 01       	movw	r22, r28
    23f6:	6f 5e       	subi	r22, 0xEF	; 239
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    23fe:	99 85       	ldd	r25, Y+9	; 0x09
    2400:	92 30       	cpi	r25, 0x02	; 2
    2402:	88 f0       	brcs	.+34     	; 0x2426 <__mulsf3+0x60>
    2404:	89 89       	ldd	r24, Y+17	; 0x11
    2406:	82 30       	cpi	r24, 0x02	; 2
    2408:	c8 f0       	brcs	.+50     	; 0x243c <__mulsf3+0x76>
    240a:	94 30       	cpi	r25, 0x04	; 4
    240c:	19 f4       	brne	.+6      	; 0x2414 <__mulsf3+0x4e>
    240e:	82 30       	cpi	r24, 0x02	; 2
    2410:	51 f4       	brne	.+20     	; 0x2426 <__mulsf3+0x60>
    2412:	04 c0       	rjmp	.+8      	; 0x241c <__mulsf3+0x56>
    2414:	84 30       	cpi	r24, 0x04	; 4
    2416:	29 f4       	brne	.+10     	; 0x2422 <__mulsf3+0x5c>
    2418:	92 30       	cpi	r25, 0x02	; 2
    241a:	81 f4       	brne	.+32     	; 0x243c <__mulsf3+0x76>
    241c:	84 e8       	ldi	r24, 0x84	; 132
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	c6 c0       	rjmp	.+396    	; 0x25ae <__mulsf3+0x1e8>
    2422:	92 30       	cpi	r25, 0x02	; 2
    2424:	49 f4       	brne	.+18     	; 0x2438 <__mulsf3+0x72>
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	8a 89       	ldd	r24, Y+18	; 0x12
    242c:	98 13       	cpse	r25, r24
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	2a 87       	std	Y+10, r18	; 0x0a
    2432:	ce 01       	movw	r24, r28
    2434:	09 96       	adiw	r24, 0x09	; 9
    2436:	bb c0       	rjmp	.+374    	; 0x25ae <__mulsf3+0x1e8>
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	49 f4       	brne	.+18     	; 0x244e <__mulsf3+0x88>
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	8a 89       	ldd	r24, Y+18	; 0x12
    2442:	98 13       	cpse	r25, r24
    2444:	21 e0       	ldi	r18, 0x01	; 1
    2446:	2a 8b       	std	Y+18, r18	; 0x12
    2448:	ce 01       	movw	r24, r28
    244a:	41 96       	adiw	r24, 0x11	; 17
    244c:	b0 c0       	rjmp	.+352    	; 0x25ae <__mulsf3+0x1e8>
    244e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2450:	3e 84       	ldd	r3, Y+14	; 0x0e
    2452:	4f 84       	ldd	r4, Y+15	; 0x0f
    2454:	58 88       	ldd	r5, Y+16	; 0x10
    2456:	6d 88       	ldd	r6, Y+21	; 0x15
    2458:	7e 88       	ldd	r7, Y+22	; 0x16
    245a:	8f 88       	ldd	r8, Y+23	; 0x17
    245c:	98 8c       	ldd	r9, Y+24	; 0x18
    245e:	ee 24       	eor	r14, r14
    2460:	ff 24       	eor	r15, r15
    2462:	87 01       	movw	r16, r14
    2464:	aa 24       	eor	r10, r10
    2466:	bb 24       	eor	r11, r11
    2468:	65 01       	movw	r12, r10
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	e0 e0       	ldi	r30, 0x00	; 0
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	c1 01       	movw	r24, r2
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	90 70       	andi	r25, 0x00	; 0
    247c:	89 2b       	or	r24, r25
    247e:	e9 f0       	breq	.+58     	; 0x24ba <__mulsf3+0xf4>
    2480:	e6 0c       	add	r14, r6
    2482:	f7 1c       	adc	r15, r7
    2484:	08 1d       	adc	r16, r8
    2486:	19 1d       	adc	r17, r9
    2488:	9a 01       	movw	r18, r20
    248a:	ab 01       	movw	r20, r22
    248c:	2a 0d       	add	r18, r10
    248e:	3b 1d       	adc	r19, r11
    2490:	4c 1d       	adc	r20, r12
    2492:	5d 1d       	adc	r21, r13
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 e0       	ldi	r26, 0x00	; 0
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e6 14       	cp	r14, r6
    249e:	f7 04       	cpc	r15, r7
    24a0:	08 05       	cpc	r16, r8
    24a2:	19 05       	cpc	r17, r9
    24a4:	20 f4       	brcc	.+8      	; 0x24ae <__mulsf3+0xe8>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ba 01       	movw	r22, r20
    24b0:	a9 01       	movw	r20, r18
    24b2:	48 0f       	add	r20, r24
    24b4:	59 1f       	adc	r21, r25
    24b6:	6a 1f       	adc	r22, r26
    24b8:	7b 1f       	adc	r23, r27
    24ba:	aa 0c       	add	r10, r10
    24bc:	bb 1c       	adc	r11, r11
    24be:	cc 1c       	adc	r12, r12
    24c0:	dd 1c       	adc	r13, r13
    24c2:	97 fe       	sbrs	r9, 7
    24c4:	08 c0       	rjmp	.+16     	; 0x24d6 <__mulsf3+0x110>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	a8 2a       	or	r10, r24
    24d0:	b9 2a       	or	r11, r25
    24d2:	ca 2a       	or	r12, r26
    24d4:	db 2a       	or	r13, r27
    24d6:	31 96       	adiw	r30, 0x01	; 1
    24d8:	e0 32       	cpi	r30, 0x20	; 32
    24da:	f1 05       	cpc	r31, r1
    24dc:	49 f0       	breq	.+18     	; 0x24f0 <__mulsf3+0x12a>
    24de:	66 0c       	add	r6, r6
    24e0:	77 1c       	adc	r7, r7
    24e2:	88 1c       	adc	r8, r8
    24e4:	99 1c       	adc	r9, r9
    24e6:	56 94       	lsr	r5
    24e8:	47 94       	ror	r4
    24ea:	37 94       	ror	r3
    24ec:	27 94       	ror	r2
    24ee:	c3 cf       	rjmp	.-122    	; 0x2476 <__mulsf3+0xb0>
    24f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    24f2:	ea 89       	ldd	r30, Y+18	; 0x12
    24f4:	2b 89       	ldd	r18, Y+19	; 0x13
    24f6:	3c 89       	ldd	r19, Y+20	; 0x14
    24f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    24fc:	28 0f       	add	r18, r24
    24fe:	39 1f       	adc	r19, r25
    2500:	2e 5f       	subi	r18, 0xFE	; 254
    2502:	3f 4f       	sbci	r19, 0xFF	; 255
    2504:	17 c0       	rjmp	.+46     	; 0x2534 <__mulsf3+0x16e>
    2506:	ca 01       	movw	r24, r20
    2508:	81 70       	andi	r24, 0x01	; 1
    250a:	90 70       	andi	r25, 0x00	; 0
    250c:	89 2b       	or	r24, r25
    250e:	61 f0       	breq	.+24     	; 0x2528 <__mulsf3+0x162>
    2510:	16 95       	lsr	r17
    2512:	07 95       	ror	r16
    2514:	f7 94       	ror	r15
    2516:	e7 94       	ror	r14
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e8       	ldi	r27, 0x80	; 128
    2520:	e8 2a       	or	r14, r24
    2522:	f9 2a       	or	r15, r25
    2524:	0a 2b       	or	r16, r26
    2526:	1b 2b       	or	r17, r27
    2528:	76 95       	lsr	r23
    252a:	67 95       	ror	r22
    252c:	57 95       	ror	r21
    252e:	47 95       	ror	r20
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	77 fd       	sbrc	r23, 7
    2536:	e7 cf       	rjmp	.-50     	; 0x2506 <__mulsf3+0x140>
    2538:	0c c0       	rjmp	.+24     	; 0x2552 <__mulsf3+0x18c>
    253a:	44 0f       	add	r20, r20
    253c:	55 1f       	adc	r21, r21
    253e:	66 1f       	adc	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	17 fd       	sbrc	r17, 7
    2544:	41 60       	ori	r20, 0x01	; 1
    2546:	ee 0c       	add	r14, r14
    2548:	ff 1c       	adc	r15, r15
    254a:	00 1f       	adc	r16, r16
    254c:	11 1f       	adc	r17, r17
    254e:	21 50       	subi	r18, 0x01	; 1
    2550:	30 40       	sbci	r19, 0x00	; 0
    2552:	40 30       	cpi	r20, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	59 07       	cpc	r21, r25
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	69 07       	cpc	r22, r25
    255c:	90 e4       	ldi	r25, 0x40	; 64
    255e:	79 07       	cpc	r23, r25
    2560:	60 f3       	brcs	.-40     	; 0x253a <__mulsf3+0x174>
    2562:	2b 8f       	std	Y+27, r18	; 0x1b
    2564:	3c 8f       	std	Y+28, r19	; 0x1c
    2566:	db 01       	movw	r26, r22
    2568:	ca 01       	movw	r24, r20
    256a:	8f 77       	andi	r24, 0x7F	; 127
    256c:	90 70       	andi	r25, 0x00	; 0
    256e:	a0 70       	andi	r26, 0x00	; 0
    2570:	b0 70       	andi	r27, 0x00	; 0
    2572:	80 34       	cpi	r24, 0x40	; 64
    2574:	91 05       	cpc	r25, r1
    2576:	a1 05       	cpc	r26, r1
    2578:	b1 05       	cpc	r27, r1
    257a:	61 f4       	brne	.+24     	; 0x2594 <__mulsf3+0x1ce>
    257c:	47 fd       	sbrc	r20, 7
    257e:	0a c0       	rjmp	.+20     	; 0x2594 <__mulsf3+0x1ce>
    2580:	e1 14       	cp	r14, r1
    2582:	f1 04       	cpc	r15, r1
    2584:	01 05       	cpc	r16, r1
    2586:	11 05       	cpc	r17, r1
    2588:	29 f0       	breq	.+10     	; 0x2594 <__mulsf3+0x1ce>
    258a:	40 5c       	subi	r20, 0xC0	; 192
    258c:	5f 4f       	sbci	r21, 0xFF	; 255
    258e:	6f 4f       	sbci	r22, 0xFF	; 255
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	40 78       	andi	r20, 0x80	; 128
    2594:	1a 8e       	std	Y+26, r1	; 0x1a
    2596:	fe 17       	cp	r31, r30
    2598:	11 f0       	breq	.+4      	; 0x259e <__mulsf3+0x1d8>
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	8a 8f       	std	Y+26, r24	; 0x1a
    259e:	4d 8f       	std	Y+29, r20	; 0x1d
    25a0:	5e 8f       	std	Y+30, r21	; 0x1e
    25a2:	6f 8f       	std	Y+31, r22	; 0x1f
    25a4:	78 a3       	std	Y+32, r23	; 0x20
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	89 8f       	std	Y+25, r24	; 0x19
    25aa:	ce 01       	movw	r24, r28
    25ac:	49 96       	adiw	r24, 0x19	; 25
    25ae:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__pack_f>
    25b2:	a0 96       	adiw	r28, 0x20	; 32
    25b4:	e2 e1       	ldi	r30, 0x12	; 18
    25b6:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__>

000025ba <__divsf3>:
    25ba:	a8 e1       	ldi	r26, 0x18	; 24
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 ee       	ldi	r30, 0xE3	; 227
    25c0:	f2 e1       	ldi	r31, 0x12	; 18
    25c2:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x10>
    25c6:	69 83       	std	Y+1, r22	; 0x01
    25c8:	7a 83       	std	Y+2, r23	; 0x02
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	2d 83       	std	Y+5, r18	; 0x05
    25d0:	3e 83       	std	Y+6, r19	; 0x06
    25d2:	4f 83       	std	Y+7, r20	; 0x07
    25d4:	58 87       	std	Y+8, r21	; 0x08
    25d6:	b9 e0       	ldi	r27, 0x09	; 9
    25d8:	eb 2e       	mov	r14, r27
    25da:	f1 2c       	mov	r15, r1
    25dc:	ec 0e       	add	r14, r28
    25de:	fd 1e       	adc	r15, r29
    25e0:	ce 01       	movw	r24, r28
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	b7 01       	movw	r22, r14
    25e6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    25ea:	8e 01       	movw	r16, r28
    25ec:	0f 5e       	subi	r16, 0xEF	; 239
    25ee:	1f 4f       	sbci	r17, 0xFF	; 255
    25f0:	ce 01       	movw	r24, r28
    25f2:	05 96       	adiw	r24, 0x05	; 5
    25f4:	b8 01       	movw	r22, r16
    25f6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    25fa:	29 85       	ldd	r18, Y+9	; 0x09
    25fc:	22 30       	cpi	r18, 0x02	; 2
    25fe:	08 f4       	brcc	.+2      	; 0x2602 <__divsf3+0x48>
    2600:	7e c0       	rjmp	.+252    	; 0x26fe <__divsf3+0x144>
    2602:	39 89       	ldd	r19, Y+17	; 0x11
    2604:	32 30       	cpi	r19, 0x02	; 2
    2606:	10 f4       	brcc	.+4      	; 0x260c <__divsf3+0x52>
    2608:	b8 01       	movw	r22, r16
    260a:	7c c0       	rjmp	.+248    	; 0x2704 <__divsf3+0x14a>
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9a 89       	ldd	r25, Y+18	; 0x12
    2610:	89 27       	eor	r24, r25
    2612:	8a 87       	std	Y+10, r24	; 0x0a
    2614:	24 30       	cpi	r18, 0x04	; 4
    2616:	11 f0       	breq	.+4      	; 0x261c <__divsf3+0x62>
    2618:	22 30       	cpi	r18, 0x02	; 2
    261a:	31 f4       	brne	.+12     	; 0x2628 <__divsf3+0x6e>
    261c:	23 17       	cp	r18, r19
    261e:	09 f0       	breq	.+2      	; 0x2622 <__divsf3+0x68>
    2620:	6e c0       	rjmp	.+220    	; 0x26fe <__divsf3+0x144>
    2622:	64 e8       	ldi	r22, 0x84	; 132
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	6e c0       	rjmp	.+220    	; 0x2704 <__divsf3+0x14a>
    2628:	34 30       	cpi	r19, 0x04	; 4
    262a:	39 f4       	brne	.+14     	; 0x263a <__divsf3+0x80>
    262c:	1d 86       	std	Y+13, r1	; 0x0d
    262e:	1e 86       	std	Y+14, r1	; 0x0e
    2630:	1f 86       	std	Y+15, r1	; 0x0f
    2632:	18 8a       	std	Y+16, r1	; 0x10
    2634:	1c 86       	std	Y+12, r1	; 0x0c
    2636:	1b 86       	std	Y+11, r1	; 0x0b
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <__divsf3+0x88>
    263a:	32 30       	cpi	r19, 0x02	; 2
    263c:	21 f4       	brne	.+8      	; 0x2646 <__divsf3+0x8c>
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	89 87       	std	Y+9, r24	; 0x09
    2642:	b7 01       	movw	r22, r14
    2644:	5f c0       	rjmp	.+190    	; 0x2704 <__divsf3+0x14a>
    2646:	2b 85       	ldd	r18, Y+11	; 0x0b
    2648:	3c 85       	ldd	r19, Y+12	; 0x0c
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	28 1b       	sub	r18, r24
    2650:	39 0b       	sbc	r19, r25
    2652:	3c 87       	std	Y+12, r19	; 0x0c
    2654:	2b 87       	std	Y+11, r18	; 0x0b
    2656:	ed 84       	ldd	r14, Y+13	; 0x0d
    2658:	fe 84       	ldd	r15, Y+14	; 0x0e
    265a:	0f 85       	ldd	r16, Y+15	; 0x0f
    265c:	18 89       	ldd	r17, Y+16	; 0x10
    265e:	ad 88       	ldd	r10, Y+21	; 0x15
    2660:	be 88       	ldd	r11, Y+22	; 0x16
    2662:	cf 88       	ldd	r12, Y+23	; 0x17
    2664:	d8 8c       	ldd	r13, Y+24	; 0x18
    2666:	ea 14       	cp	r14, r10
    2668:	fb 04       	cpc	r15, r11
    266a:	0c 05       	cpc	r16, r12
    266c:	1d 05       	cpc	r17, r13
    266e:	40 f4       	brcc	.+16     	; 0x2680 <__divsf3+0xc6>
    2670:	ee 0c       	add	r14, r14
    2672:	ff 1c       	adc	r15, r15
    2674:	00 1f       	adc	r16, r16
    2676:	11 1f       	adc	r17, r17
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	30 40       	sbci	r19, 0x00	; 0
    267c:	3c 87       	std	Y+12, r19	; 0x0c
    267e:	2b 87       	std	Y+11, r18	; 0x0b
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e4       	ldi	r27, 0x40	; 64
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	ea 14       	cp	r14, r10
    2696:	fb 04       	cpc	r15, r11
    2698:	0c 05       	cpc	r16, r12
    269a:	1d 05       	cpc	r17, r13
    269c:	40 f0       	brcs	.+16     	; 0x26ae <__divsf3+0xf4>
    269e:	28 2b       	or	r18, r24
    26a0:	39 2b       	or	r19, r25
    26a2:	4a 2b       	or	r20, r26
    26a4:	5b 2b       	or	r21, r27
    26a6:	ea 18       	sub	r14, r10
    26a8:	fb 08       	sbc	r15, r11
    26aa:	0c 09       	sbc	r16, r12
    26ac:	1d 09       	sbc	r17, r13
    26ae:	b6 95       	lsr	r27
    26b0:	a7 95       	ror	r26
    26b2:	97 95       	ror	r25
    26b4:	87 95       	ror	r24
    26b6:	ee 0c       	add	r14, r14
    26b8:	ff 1c       	adc	r15, r15
    26ba:	00 1f       	adc	r16, r16
    26bc:	11 1f       	adc	r17, r17
    26be:	6f 5f       	subi	r22, 0xFF	; 255
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	6f 31       	cpi	r22, 0x1F	; 31
    26c4:	71 05       	cpc	r23, r1
    26c6:	31 f7       	brne	.-52     	; 0x2694 <__divsf3+0xda>
    26c8:	da 01       	movw	r26, r20
    26ca:	c9 01       	movw	r24, r18
    26cc:	8f 77       	andi	r24, 0x7F	; 127
    26ce:	90 70       	andi	r25, 0x00	; 0
    26d0:	a0 70       	andi	r26, 0x00	; 0
    26d2:	b0 70       	andi	r27, 0x00	; 0
    26d4:	80 34       	cpi	r24, 0x40	; 64
    26d6:	91 05       	cpc	r25, r1
    26d8:	a1 05       	cpc	r26, r1
    26da:	b1 05       	cpc	r27, r1
    26dc:	61 f4       	brne	.+24     	; 0x26f6 <__divsf3+0x13c>
    26de:	27 fd       	sbrc	r18, 7
    26e0:	0a c0       	rjmp	.+20     	; 0x26f6 <__divsf3+0x13c>
    26e2:	e1 14       	cp	r14, r1
    26e4:	f1 04       	cpc	r15, r1
    26e6:	01 05       	cpc	r16, r1
    26e8:	11 05       	cpc	r17, r1
    26ea:	29 f0       	breq	.+10     	; 0x26f6 <__divsf3+0x13c>
    26ec:	20 5c       	subi	r18, 0xC0	; 192
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	4f 4f       	sbci	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	20 78       	andi	r18, 0x80	; 128
    26f6:	2d 87       	std	Y+13, r18	; 0x0d
    26f8:	3e 87       	std	Y+14, r19	; 0x0e
    26fa:	4f 87       	std	Y+15, r20	; 0x0f
    26fc:	58 8b       	std	Y+16, r21	; 0x10
    26fe:	be 01       	movw	r22, r28
    2700:	67 5f       	subi	r22, 0xF7	; 247
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	cb 01       	movw	r24, r22
    2706:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__pack_f>
    270a:	68 96       	adiw	r28, 0x18	; 24
    270c:	ea e0       	ldi	r30, 0x0A	; 10
    270e:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x10>

00002712 <__gtsf2>:
    2712:	a8 e1       	ldi	r26, 0x18	; 24
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ef e8       	ldi	r30, 0x8F	; 143
    2718:	f3 e1       	ldi	r31, 0x13	; 19
    271a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x18>
    271e:	69 83       	std	Y+1, r22	; 0x01
    2720:	7a 83       	std	Y+2, r23	; 0x02
    2722:	8b 83       	std	Y+3, r24	; 0x03
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	2d 83       	std	Y+5, r18	; 0x05
    2728:	3e 83       	std	Y+6, r19	; 0x06
    272a:	4f 83       	std	Y+7, r20	; 0x07
    272c:	58 87       	std	Y+8, r21	; 0x08
    272e:	89 e0       	ldi	r24, 0x09	; 9
    2730:	e8 2e       	mov	r14, r24
    2732:	f1 2c       	mov	r15, r1
    2734:	ec 0e       	add	r14, r28
    2736:	fd 1e       	adc	r15, r29
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	b7 01       	movw	r22, r14
    273e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    2742:	8e 01       	movw	r16, r28
    2744:	0f 5e       	subi	r16, 0xEF	; 239
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	ce 01       	movw	r24, r28
    274a:	05 96       	adiw	r24, 0x05	; 5
    274c:	b8 01       	movw	r22, r16
    274e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	40 f0       	brcs	.+16     	; 0x2768 <__gtsf2+0x56>
    2758:	89 89       	ldd	r24, Y+17	; 0x11
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	28 f0       	brcs	.+10     	; 0x2768 <__gtsf2+0x56>
    275e:	c7 01       	movw	r24, r14
    2760:	b8 01       	movw	r22, r16
    2762:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fpcmp_parts_f>
    2766:	01 c0       	rjmp	.+2      	; 0x276a <__gtsf2+0x58>
    2768:	8f ef       	ldi	r24, 0xFF	; 255
    276a:	68 96       	adiw	r28, 0x18	; 24
    276c:	e6 e0       	ldi	r30, 0x06	; 6
    276e:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x18>

00002772 <__gesf2>:
    2772:	a8 e1       	ldi	r26, 0x18	; 24
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ef eb       	ldi	r30, 0xBF	; 191
    2778:	f3 e1       	ldi	r31, 0x13	; 19
    277a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x18>
    277e:	69 83       	std	Y+1, r22	; 0x01
    2780:	7a 83       	std	Y+2, r23	; 0x02
    2782:	8b 83       	std	Y+3, r24	; 0x03
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	2d 83       	std	Y+5, r18	; 0x05
    2788:	3e 83       	std	Y+6, r19	; 0x06
    278a:	4f 83       	std	Y+7, r20	; 0x07
    278c:	58 87       	std	Y+8, r21	; 0x08
    278e:	89 e0       	ldi	r24, 0x09	; 9
    2790:	e8 2e       	mov	r14, r24
    2792:	f1 2c       	mov	r15, r1
    2794:	ec 0e       	add	r14, r28
    2796:	fd 1e       	adc	r15, r29
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	b7 01       	movw	r22, r14
    279e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    27a2:	8e 01       	movw	r16, r28
    27a4:	0f 5e       	subi	r16, 0xEF	; 239
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	ce 01       	movw	r24, r28
    27aa:	05 96       	adiw	r24, 0x05	; 5
    27ac:	b8 01       	movw	r22, r16
    27ae:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	82 30       	cpi	r24, 0x02	; 2
    27b6:	40 f0       	brcs	.+16     	; 0x27c8 <__gesf2+0x56>
    27b8:	89 89       	ldd	r24, Y+17	; 0x11
    27ba:	82 30       	cpi	r24, 0x02	; 2
    27bc:	28 f0       	brcs	.+10     	; 0x27c8 <__gesf2+0x56>
    27be:	c7 01       	movw	r24, r14
    27c0:	b8 01       	movw	r22, r16
    27c2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fpcmp_parts_f>
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <__gesf2+0x58>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	68 96       	adiw	r28, 0x18	; 24
    27cc:	e6 e0       	ldi	r30, 0x06	; 6
    27ce:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x18>

000027d2 <__ltsf2>:
    27d2:	a8 e1       	ldi	r26, 0x18	; 24
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef ee       	ldi	r30, 0xEF	; 239
    27d8:	f3 e1       	ldi	r31, 0x13	; 19
    27da:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x18>
    27de:	69 83       	std	Y+1, r22	; 0x01
    27e0:	7a 83       	std	Y+2, r23	; 0x02
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	2d 83       	std	Y+5, r18	; 0x05
    27e8:	3e 83       	std	Y+6, r19	; 0x06
    27ea:	4f 83       	std	Y+7, r20	; 0x07
    27ec:	58 87       	std	Y+8, r21	; 0x08
    27ee:	89 e0       	ldi	r24, 0x09	; 9
    27f0:	e8 2e       	mov	r14, r24
    27f2:	f1 2c       	mov	r15, r1
    27f4:	ec 0e       	add	r14, r28
    27f6:	fd 1e       	adc	r15, r29
    27f8:	ce 01       	movw	r24, r28
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	b7 01       	movw	r22, r14
    27fe:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    2802:	8e 01       	movw	r16, r28
    2804:	0f 5e       	subi	r16, 0xEF	; 239
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	ce 01       	movw	r24, r28
    280a:	05 96       	adiw	r24, 0x05	; 5
    280c:	b8 01       	movw	r22, r16
    280e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	82 30       	cpi	r24, 0x02	; 2
    2816:	40 f0       	brcs	.+16     	; 0x2828 <__ltsf2+0x56>
    2818:	89 89       	ldd	r24, Y+17	; 0x11
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	28 f0       	brcs	.+10     	; 0x2828 <__ltsf2+0x56>
    281e:	c7 01       	movw	r24, r14
    2820:	b8 01       	movw	r22, r16
    2822:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fpcmp_parts_f>
    2826:	01 c0       	rjmp	.+2      	; 0x282a <__ltsf2+0x58>
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	68 96       	adiw	r28, 0x18	; 24
    282c:	e6 e0       	ldi	r30, 0x06	; 6
    282e:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x18>

00002832 <__fixsfsi>:
    2832:	ac e0       	ldi	r26, 0x0C	; 12
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ef e1       	ldi	r30, 0x1F	; 31
    2838:	f4 e1       	ldi	r31, 0x14	; 20
    283a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x20>
    283e:	69 83       	std	Y+1, r22	; 0x01
    2840:	7a 83       	std	Y+2, r23	; 0x02
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	ce 01       	movw	r24, r28
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	be 01       	movw	r22, r28
    284c:	6b 5f       	subi	r22, 0xFB	; 251
    284e:	7f 4f       	sbci	r23, 0xFF	; 255
    2850:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__unpack_f>
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	61 f1       	breq	.+88     	; 0x28b2 <__fixsfsi+0x80>
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	50 f1       	brcs	.+84     	; 0x28b2 <__fixsfsi+0x80>
    285e:	84 30       	cpi	r24, 0x04	; 4
    2860:	21 f4       	brne	.+8      	; 0x286a <__fixsfsi+0x38>
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	88 23       	and	r24, r24
    2866:	51 f1       	breq	.+84     	; 0x28bc <__fixsfsi+0x8a>
    2868:	2e c0       	rjmp	.+92     	; 0x28c6 <__fixsfsi+0x94>
    286a:	2f 81       	ldd	r18, Y+7	; 0x07
    286c:	38 85       	ldd	r19, Y+8	; 0x08
    286e:	37 fd       	sbrc	r19, 7
    2870:	20 c0       	rjmp	.+64     	; 0x28b2 <__fixsfsi+0x80>
    2872:	6e 81       	ldd	r22, Y+6	; 0x06
    2874:	2f 31       	cpi	r18, 0x1F	; 31
    2876:	31 05       	cpc	r19, r1
    2878:	1c f0       	brlt	.+6      	; 0x2880 <__fixsfsi+0x4e>
    287a:	66 23       	and	r22, r22
    287c:	f9 f0       	breq	.+62     	; 0x28bc <__fixsfsi+0x8a>
    287e:	23 c0       	rjmp	.+70     	; 0x28c6 <__fixsfsi+0x94>
    2880:	8e e1       	ldi	r24, 0x1E	; 30
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	82 1b       	sub	r24, r18
    2886:	93 0b       	sbc	r25, r19
    2888:	29 85       	ldd	r18, Y+9	; 0x09
    288a:	3a 85       	ldd	r19, Y+10	; 0x0a
    288c:	4b 85       	ldd	r20, Y+11	; 0x0b
    288e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__fixsfsi+0x68>
    2892:	56 95       	lsr	r21
    2894:	47 95       	ror	r20
    2896:	37 95       	ror	r19
    2898:	27 95       	ror	r18
    289a:	8a 95       	dec	r24
    289c:	d2 f7       	brpl	.-12     	; 0x2892 <__fixsfsi+0x60>
    289e:	66 23       	and	r22, r22
    28a0:	b1 f0       	breq	.+44     	; 0x28ce <__fixsfsi+0x9c>
    28a2:	50 95       	com	r21
    28a4:	40 95       	com	r20
    28a6:	30 95       	com	r19
    28a8:	21 95       	neg	r18
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	4f 4f       	sbci	r20, 0xFF	; 255
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
    28b0:	0e c0       	rjmp	.+28     	; 0x28ce <__fixsfsi+0x9c>
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	09 c0       	rjmp	.+18     	; 0x28ce <__fixsfsi+0x9c>
    28bc:	2f ef       	ldi	r18, 0xFF	; 255
    28be:	3f ef       	ldi	r19, 0xFF	; 255
    28c0:	4f ef       	ldi	r20, 0xFF	; 255
    28c2:	5f e7       	ldi	r21, 0x7F	; 127
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <__fixsfsi+0x9c>
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e8       	ldi	r21, 0x80	; 128
    28ce:	b9 01       	movw	r22, r18
    28d0:	ca 01       	movw	r24, r20
    28d2:	2c 96       	adiw	r28, 0x0c	; 12
    28d4:	e2 e0       	ldi	r30, 0x02	; 2
    28d6:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x20>

000028da <__floatunsisf>:
    28da:	a8 e0       	ldi	r26, 0x08	; 8
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e3 e7       	ldi	r30, 0x73	; 115
    28e0:	f4 e1       	ldi	r31, 0x14	; 20
    28e2:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x10>
    28e6:	7b 01       	movw	r14, r22
    28e8:	8c 01       	movw	r16, r24
    28ea:	61 15       	cp	r22, r1
    28ec:	71 05       	cpc	r23, r1
    28ee:	81 05       	cpc	r24, r1
    28f0:	91 05       	cpc	r25, r1
    28f2:	19 f4       	brne	.+6      	; 0x28fa <__floatunsisf+0x20>
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	60 c0       	rjmp	.+192    	; 0x29ba <__floatunsisf+0xe0>
    28fa:	83 e0       	ldi	r24, 0x03	; 3
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	8e e1       	ldi	r24, 0x1E	; 30
    2900:	c8 2e       	mov	r12, r24
    2902:	d1 2c       	mov	r13, r1
    2904:	dc 82       	std	Y+4, r13	; 0x04
    2906:	cb 82       	std	Y+3, r12	; 0x03
    2908:	ed 82       	std	Y+5, r14	; 0x05
    290a:	fe 82       	std	Y+6, r15	; 0x06
    290c:	0f 83       	std	Y+7, r16	; 0x07
    290e:	18 87       	std	Y+8, r17	; 0x08
    2910:	c8 01       	movw	r24, r16
    2912:	b7 01       	movw	r22, r14
    2914:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__clzsi2>
    2918:	fc 01       	movw	r30, r24
    291a:	31 97       	sbiw	r30, 0x01	; 1
    291c:	f7 ff       	sbrs	r31, 7
    291e:	3b c0       	rjmp	.+118    	; 0x2996 <__floatunsisf+0xbc>
    2920:	22 27       	eor	r18, r18
    2922:	33 27       	eor	r19, r19
    2924:	2e 1b       	sub	r18, r30
    2926:	3f 0b       	sbc	r19, r31
    2928:	57 01       	movw	r10, r14
    292a:	68 01       	movw	r12, r16
    292c:	02 2e       	mov	r0, r18
    292e:	04 c0       	rjmp	.+8      	; 0x2938 <__floatunsisf+0x5e>
    2930:	d6 94       	lsr	r13
    2932:	c7 94       	ror	r12
    2934:	b7 94       	ror	r11
    2936:	a7 94       	ror	r10
    2938:	0a 94       	dec	r0
    293a:	d2 f7       	brpl	.-12     	; 0x2930 <__floatunsisf+0x56>
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a0 e0       	ldi	r26, 0x00	; 0
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <__floatunsisf+0x7c>
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	aa 1f       	adc	r26, r26
    2954:	bb 1f       	adc	r27, r27
    2956:	2a 95       	dec	r18
    2958:	d2 f7       	brpl	.-12     	; 0x294e <__floatunsisf+0x74>
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	a1 09       	sbc	r26, r1
    295e:	b1 09       	sbc	r27, r1
    2960:	8e 21       	and	r24, r14
    2962:	9f 21       	and	r25, r15
    2964:	a0 23       	and	r26, r16
    2966:	b1 23       	and	r27, r17
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	a1 05       	cpc	r26, r1
    296c:	b1 05       	cpc	r27, r1
    296e:	21 f0       	breq	.+8      	; 0x2978 <__floatunsisf+0x9e>
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	4a 29       	or	r20, r10
    297a:	5b 29       	or	r21, r11
    297c:	6c 29       	or	r22, r12
    297e:	7d 29       	or	r23, r13
    2980:	4d 83       	std	Y+5, r20	; 0x05
    2982:	5e 83       	std	Y+6, r21	; 0x06
    2984:	6f 83       	std	Y+7, r22	; 0x07
    2986:	78 87       	std	Y+8, r23	; 0x08
    2988:	8e e1       	ldi	r24, 0x1E	; 30
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	8e 1b       	sub	r24, r30
    298e:	9f 0b       	sbc	r25, r31
    2990:	9c 83       	std	Y+4, r25	; 0x04
    2992:	8b 83       	std	Y+3, r24	; 0x03
    2994:	12 c0       	rjmp	.+36     	; 0x29ba <__floatunsisf+0xe0>
    2996:	30 97       	sbiw	r30, 0x00	; 0
    2998:	81 f0       	breq	.+32     	; 0x29ba <__floatunsisf+0xe0>
    299a:	0e 2e       	mov	r0, r30
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <__floatunsisf+0xcc>
    299e:	ee 0c       	add	r14, r14
    29a0:	ff 1c       	adc	r15, r15
    29a2:	00 1f       	adc	r16, r16
    29a4:	11 1f       	adc	r17, r17
    29a6:	0a 94       	dec	r0
    29a8:	d2 f7       	brpl	.-12     	; 0x299e <__floatunsisf+0xc4>
    29aa:	ed 82       	std	Y+5, r14	; 0x05
    29ac:	fe 82       	std	Y+6, r15	; 0x06
    29ae:	0f 83       	std	Y+7, r16	; 0x07
    29b0:	18 87       	std	Y+8, r17	; 0x08
    29b2:	ce 1a       	sub	r12, r30
    29b4:	df 0a       	sbc	r13, r31
    29b6:	dc 82       	std	Y+4, r13	; 0x04
    29b8:	cb 82       	std	Y+3, r12	; 0x03
    29ba:	1a 82       	std	Y+2, r1	; 0x02
    29bc:	ce 01       	movw	r24, r28
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__pack_f>
    29c4:	28 96       	adiw	r28, 0x08	; 8
    29c6:	ea e0       	ldi	r30, 0x0A	; 10
    29c8:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x10>

000029cc <__clzsi2>:
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	7b 01       	movw	r14, r22
    29d6:	8c 01       	movw	r16, r24
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	e8 16       	cp	r14, r24
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	f8 06       	cpc	r15, r24
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	08 07       	cpc	r16, r24
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	18 07       	cpc	r17, r24
    29e8:	88 f4       	brcc	.+34     	; 0x2a0c <__clzsi2+0x40>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	e8 16       	cp	r14, r24
    29ee:	f1 04       	cpc	r15, r1
    29f0:	01 05       	cpc	r16, r1
    29f2:	11 05       	cpc	r17, r1
    29f4:	31 f0       	breq	.+12     	; 0x2a02 <__clzsi2+0x36>
    29f6:	28 f0       	brcs	.+10     	; 0x2a02 <__clzsi2+0x36>
    29f8:	88 e0       	ldi	r24, 0x08	; 8
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e0       	ldi	r26, 0x00	; 0
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	17 c0       	rjmp	.+46     	; 0x2a30 <__clzsi2+0x64>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	12 c0       	rjmp	.+36     	; 0x2a30 <__clzsi2+0x64>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	e8 16       	cp	r14, r24
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	f8 06       	cpc	r15, r24
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	08 07       	cpc	r16, r24
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	18 07       	cpc	r17, r24
    2a1c:	28 f0       	brcs	.+10     	; 0x2a28 <__clzsi2+0x5c>
    2a1e:	88 e1       	ldi	r24, 0x18	; 24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	a0 e0       	ldi	r26, 0x00	; 0
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	04 c0       	rjmp	.+8      	; 0x2a30 <__clzsi2+0x64>
    2a28:	80 e1       	ldi	r24, 0x10	; 16
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a0 e0       	ldi	r26, 0x00	; 0
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	20 e2       	ldi	r18, 0x20	; 32
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	28 1b       	sub	r18, r24
    2a3a:	39 0b       	sbc	r19, r25
    2a3c:	4a 0b       	sbc	r20, r26
    2a3e:	5b 0b       	sbc	r21, r27
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__clzsi2+0x7e>
    2a42:	16 95       	lsr	r17
    2a44:	07 95       	ror	r16
    2a46:	f7 94       	ror	r15
    2a48:	e7 94       	ror	r14
    2a4a:	8a 95       	dec	r24
    2a4c:	d2 f7       	brpl	.-12     	; 0x2a42 <__clzsi2+0x76>
    2a4e:	f7 01       	movw	r30, r14
    2a50:	e4 57       	subi	r30, 0x74	; 116
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	28 1b       	sub	r18, r24
    2a58:	31 09       	sbc	r19, r1
    2a5a:	41 09       	sbc	r20, r1
    2a5c:	51 09       	sbc	r21, r1
    2a5e:	c9 01       	movw	r24, r18
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	08 95       	ret

00002a6a <__pack_f>:
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	fc 01       	movw	r30, r24
    2a76:	e4 80       	ldd	r14, Z+4	; 0x04
    2a78:	f5 80       	ldd	r15, Z+5	; 0x05
    2a7a:	06 81       	ldd	r16, Z+6	; 0x06
    2a7c:	17 81       	ldd	r17, Z+7	; 0x07
    2a7e:	d1 80       	ldd	r13, Z+1	; 0x01
    2a80:	80 81       	ld	r24, Z
    2a82:	82 30       	cpi	r24, 0x02	; 2
    2a84:	48 f4       	brcc	.+18     	; 0x2a98 <__pack_f+0x2e>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e1       	ldi	r26, 0x10	; 16
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e8 2a       	or	r14, r24
    2a90:	f9 2a       	or	r15, r25
    2a92:	0a 2b       	or	r16, r26
    2a94:	1b 2b       	or	r17, r27
    2a96:	a5 c0       	rjmp	.+330    	; 0x2be2 <__pack_f+0x178>
    2a98:	84 30       	cpi	r24, 0x04	; 4
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <__pack_f+0x34>
    2a9c:	9f c0       	rjmp	.+318    	; 0x2bdc <__pack_f+0x172>
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	21 f4       	brne	.+8      	; 0x2aaa <__pack_f+0x40>
    2aa2:	ee 24       	eor	r14, r14
    2aa4:	ff 24       	eor	r15, r15
    2aa6:	87 01       	movw	r16, r14
    2aa8:	05 c0       	rjmp	.+10     	; 0x2ab4 <__pack_f+0x4a>
    2aaa:	e1 14       	cp	r14, r1
    2aac:	f1 04       	cpc	r15, r1
    2aae:	01 05       	cpc	r16, r1
    2ab0:	11 05       	cpc	r17, r1
    2ab2:	19 f4       	brne	.+6      	; 0x2aba <__pack_f+0x50>
    2ab4:	e0 e0       	ldi	r30, 0x00	; 0
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	96 c0       	rjmp	.+300    	; 0x2be6 <__pack_f+0x17c>
    2aba:	62 81       	ldd	r22, Z+2	; 0x02
    2abc:	73 81       	ldd	r23, Z+3	; 0x03
    2abe:	9f ef       	ldi	r25, 0xFF	; 255
    2ac0:	62 38       	cpi	r22, 0x82	; 130
    2ac2:	79 07       	cpc	r23, r25
    2ac4:	0c f0       	brlt	.+2      	; 0x2ac8 <__pack_f+0x5e>
    2ac6:	5b c0       	rjmp	.+182    	; 0x2b7e <__pack_f+0x114>
    2ac8:	22 e8       	ldi	r18, 0x82	; 130
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	26 1b       	sub	r18, r22
    2ace:	37 0b       	sbc	r19, r23
    2ad0:	2a 31       	cpi	r18, 0x1A	; 26
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	2c f0       	brlt	.+10     	; 0x2ae0 <__pack_f+0x76>
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	2a c0       	rjmp	.+84     	; 0x2b34 <__pack_f+0xca>
    2ae0:	b8 01       	movw	r22, r16
    2ae2:	a7 01       	movw	r20, r14
    2ae4:	02 2e       	mov	r0, r18
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <__pack_f+0x86>
    2ae8:	76 95       	lsr	r23
    2aea:	67 95       	ror	r22
    2aec:	57 95       	ror	r21
    2aee:	47 95       	ror	r20
    2af0:	0a 94       	dec	r0
    2af2:	d2 f7       	brpl	.-12     	; 0x2ae8 <__pack_f+0x7e>
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a0 e0       	ldi	r26, 0x00	; 0
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <__pack_f+0x9c>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	aa 1f       	adc	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	2a 95       	dec	r18
    2b08:	d2 f7       	brpl	.-12     	; 0x2afe <__pack_f+0x94>
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	a1 09       	sbc	r26, r1
    2b0e:	b1 09       	sbc	r27, r1
    2b10:	8e 21       	and	r24, r14
    2b12:	9f 21       	and	r25, r15
    2b14:	a0 23       	and	r26, r16
    2b16:	b1 23       	and	r27, r17
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	a1 05       	cpc	r26, r1
    2b1c:	b1 05       	cpc	r27, r1
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <__pack_f+0xbe>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e0       	ldi	r26, 0x00	; 0
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	9a 01       	movw	r18, r20
    2b2a:	ab 01       	movw	r20, r22
    2b2c:	28 2b       	or	r18, r24
    2b2e:	39 2b       	or	r19, r25
    2b30:	4a 2b       	or	r20, r26
    2b32:	5b 2b       	or	r21, r27
    2b34:	da 01       	movw	r26, r20
    2b36:	c9 01       	movw	r24, r18
    2b38:	8f 77       	andi	r24, 0x7F	; 127
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	a0 70       	andi	r26, 0x00	; 0
    2b3e:	b0 70       	andi	r27, 0x00	; 0
    2b40:	80 34       	cpi	r24, 0x40	; 64
    2b42:	91 05       	cpc	r25, r1
    2b44:	a1 05       	cpc	r26, r1
    2b46:	b1 05       	cpc	r27, r1
    2b48:	39 f4       	brne	.+14     	; 0x2b58 <__pack_f+0xee>
    2b4a:	27 ff       	sbrs	r18, 7
    2b4c:	09 c0       	rjmp	.+18     	; 0x2b60 <__pack_f+0xf6>
    2b4e:	20 5c       	subi	r18, 0xC0	; 192
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	4f 4f       	sbci	r20, 0xFF	; 255
    2b54:	5f 4f       	sbci	r21, 0xFF	; 255
    2b56:	04 c0       	rjmp	.+8      	; 0x2b60 <__pack_f+0xf6>
    2b58:	21 5c       	subi	r18, 0xC1	; 193
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b60:	e0 e0       	ldi	r30, 0x00	; 0
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	20 30       	cpi	r18, 0x00	; 0
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	3a 07       	cpc	r19, r26
    2b6a:	a0 e0       	ldi	r26, 0x00	; 0
    2b6c:	4a 07       	cpc	r20, r26
    2b6e:	a0 e4       	ldi	r26, 0x40	; 64
    2b70:	5a 07       	cpc	r21, r26
    2b72:	10 f0       	brcs	.+4      	; 0x2b78 <__pack_f+0x10e>
    2b74:	e1 e0       	ldi	r30, 0x01	; 1
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	79 01       	movw	r14, r18
    2b7a:	8a 01       	movw	r16, r20
    2b7c:	27 c0       	rjmp	.+78     	; 0x2bcc <__pack_f+0x162>
    2b7e:	60 38       	cpi	r22, 0x80	; 128
    2b80:	71 05       	cpc	r23, r1
    2b82:	64 f5       	brge	.+88     	; 0x2bdc <__pack_f+0x172>
    2b84:	fb 01       	movw	r30, r22
    2b86:	e1 58       	subi	r30, 0x81	; 129
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	d8 01       	movw	r26, r16
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	8f 77       	andi	r24, 0x7F	; 127
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	a0 70       	andi	r26, 0x00	; 0
    2b94:	b0 70       	andi	r27, 0x00	; 0
    2b96:	80 34       	cpi	r24, 0x40	; 64
    2b98:	91 05       	cpc	r25, r1
    2b9a:	a1 05       	cpc	r26, r1
    2b9c:	b1 05       	cpc	r27, r1
    2b9e:	39 f4       	brne	.+14     	; 0x2bae <__pack_f+0x144>
    2ba0:	e7 fe       	sbrs	r14, 7
    2ba2:	0d c0       	rjmp	.+26     	; 0x2bbe <__pack_f+0x154>
    2ba4:	80 e4       	ldi	r24, 0x40	; 64
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__pack_f+0x14c>
    2bae:	8f e3       	ldi	r24, 0x3F	; 63
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a0 e0       	ldi	r26, 0x00	; 0
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e8 0e       	add	r14, r24
    2bb8:	f9 1e       	adc	r15, r25
    2bba:	0a 1f       	adc	r16, r26
    2bbc:	1b 1f       	adc	r17, r27
    2bbe:	17 ff       	sbrs	r17, 7
    2bc0:	05 c0       	rjmp	.+10     	; 0x2bcc <__pack_f+0x162>
    2bc2:	16 95       	lsr	r17
    2bc4:	07 95       	ror	r16
    2bc6:	f7 94       	ror	r15
    2bc8:	e7 94       	ror	r14
    2bca:	31 96       	adiw	r30, 0x01	; 1
    2bcc:	87 e0       	ldi	r24, 0x07	; 7
    2bce:	16 95       	lsr	r17
    2bd0:	07 95       	ror	r16
    2bd2:	f7 94       	ror	r15
    2bd4:	e7 94       	ror	r14
    2bd6:	8a 95       	dec	r24
    2bd8:	d1 f7       	brne	.-12     	; 0x2bce <__pack_f+0x164>
    2bda:	05 c0       	rjmp	.+10     	; 0x2be6 <__pack_f+0x17c>
    2bdc:	ee 24       	eor	r14, r14
    2bde:	ff 24       	eor	r15, r15
    2be0:	87 01       	movw	r16, r14
    2be2:	ef ef       	ldi	r30, 0xFF	; 255
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	6e 2f       	mov	r22, r30
    2be8:	67 95       	ror	r22
    2bea:	66 27       	eor	r22, r22
    2bec:	67 95       	ror	r22
    2bee:	90 2f       	mov	r25, r16
    2bf0:	9f 77       	andi	r25, 0x7F	; 127
    2bf2:	d7 94       	ror	r13
    2bf4:	dd 24       	eor	r13, r13
    2bf6:	d7 94       	ror	r13
    2bf8:	8e 2f       	mov	r24, r30
    2bfa:	86 95       	lsr	r24
    2bfc:	49 2f       	mov	r20, r25
    2bfe:	46 2b       	or	r20, r22
    2c00:	58 2f       	mov	r21, r24
    2c02:	5d 29       	or	r21, r13
    2c04:	b7 01       	movw	r22, r14
    2c06:	ca 01       	movw	r24, r20
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	08 95       	ret

00002c14 <__unpack_f>:
    2c14:	fc 01       	movw	r30, r24
    2c16:	db 01       	movw	r26, r22
    2c18:	40 81       	ld	r20, Z
    2c1a:	51 81       	ldd	r21, Z+1	; 0x01
    2c1c:	22 81       	ldd	r18, Z+2	; 0x02
    2c1e:	62 2f       	mov	r22, r18
    2c20:	6f 77       	andi	r22, 0x7F	; 127
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	22 1f       	adc	r18, r18
    2c26:	22 27       	eor	r18, r18
    2c28:	22 1f       	adc	r18, r18
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	89 2f       	mov	r24, r25
    2c2e:	88 0f       	add	r24, r24
    2c30:	82 2b       	or	r24, r18
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	99 1f       	adc	r25, r25
    2c38:	99 27       	eor	r25, r25
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	11 96       	adiw	r26, 0x01	; 1
    2c3e:	9c 93       	st	X, r25
    2c40:	11 97       	sbiw	r26, 0x01	; 1
    2c42:	21 15       	cp	r18, r1
    2c44:	31 05       	cpc	r19, r1
    2c46:	a9 f5       	brne	.+106    	; 0x2cb2 <__unpack_f+0x9e>
    2c48:	41 15       	cp	r20, r1
    2c4a:	51 05       	cpc	r21, r1
    2c4c:	61 05       	cpc	r22, r1
    2c4e:	71 05       	cpc	r23, r1
    2c50:	11 f4       	brne	.+4      	; 0x2c56 <__unpack_f+0x42>
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	37 c0       	rjmp	.+110    	; 0x2cc4 <__unpack_f+0xb0>
    2c56:	82 e8       	ldi	r24, 0x82	; 130
    2c58:	9f ef       	ldi	r25, 0xFF	; 255
    2c5a:	13 96       	adiw	r26, 0x03	; 3
    2c5c:	9c 93       	st	X, r25
    2c5e:	8e 93       	st	-X, r24
    2c60:	12 97       	sbiw	r26, 0x02	; 2
    2c62:	9a 01       	movw	r18, r20
    2c64:	ab 01       	movw	r20, r22
    2c66:	67 e0       	ldi	r22, 0x07	; 7
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	44 1f       	adc	r20, r20
    2c6e:	55 1f       	adc	r21, r21
    2c70:	6a 95       	dec	r22
    2c72:	d1 f7       	brne	.-12     	; 0x2c68 <__unpack_f+0x54>
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	8c 93       	st	X, r24
    2c78:	0d c0       	rjmp	.+26     	; 0x2c94 <__unpack_f+0x80>
    2c7a:	22 0f       	add	r18, r18
    2c7c:	33 1f       	adc	r19, r19
    2c7e:	44 1f       	adc	r20, r20
    2c80:	55 1f       	adc	r21, r21
    2c82:	12 96       	adiw	r26, 0x02	; 2
    2c84:	8d 91       	ld	r24, X+
    2c86:	9c 91       	ld	r25, X
    2c88:	13 97       	sbiw	r26, 0x03	; 3
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	13 96       	adiw	r26, 0x03	; 3
    2c8e:	9c 93       	st	X, r25
    2c90:	8e 93       	st	-X, r24
    2c92:	12 97       	sbiw	r26, 0x02	; 2
    2c94:	20 30       	cpi	r18, 0x00	; 0
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	38 07       	cpc	r19, r24
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	48 07       	cpc	r20, r24
    2c9e:	80 e4       	ldi	r24, 0x40	; 64
    2ca0:	58 07       	cpc	r21, r24
    2ca2:	58 f3       	brcs	.-42     	; 0x2c7a <__unpack_f+0x66>
    2ca4:	14 96       	adiw	r26, 0x04	; 4
    2ca6:	2d 93       	st	X+, r18
    2ca8:	3d 93       	st	X+, r19
    2caa:	4d 93       	st	X+, r20
    2cac:	5c 93       	st	X, r21
    2cae:	17 97       	sbiw	r26, 0x07	; 7
    2cb0:	08 95       	ret
    2cb2:	2f 3f       	cpi	r18, 0xFF	; 255
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	79 f4       	brne	.+30     	; 0x2cd6 <__unpack_f+0xc2>
    2cb8:	41 15       	cp	r20, r1
    2cba:	51 05       	cpc	r21, r1
    2cbc:	61 05       	cpc	r22, r1
    2cbe:	71 05       	cpc	r23, r1
    2cc0:	19 f4       	brne	.+6      	; 0x2cc8 <__unpack_f+0xb4>
    2cc2:	84 e0       	ldi	r24, 0x04	; 4
    2cc4:	8c 93       	st	X, r24
    2cc6:	08 95       	ret
    2cc8:	64 ff       	sbrs	r22, 4
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <__unpack_f+0xbe>
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	8c 93       	st	X, r24
    2cd0:	12 c0       	rjmp	.+36     	; 0x2cf6 <__unpack_f+0xe2>
    2cd2:	1c 92       	st	X, r1
    2cd4:	10 c0       	rjmp	.+32     	; 0x2cf6 <__unpack_f+0xe2>
    2cd6:	2f 57       	subi	r18, 0x7F	; 127
    2cd8:	30 40       	sbci	r19, 0x00	; 0
    2cda:	13 96       	adiw	r26, 0x03	; 3
    2cdc:	3c 93       	st	X, r19
    2cde:	2e 93       	st	-X, r18
    2ce0:	12 97       	sbiw	r26, 0x02	; 2
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	8c 93       	st	X, r24
    2ce6:	87 e0       	ldi	r24, 0x07	; 7
    2ce8:	44 0f       	add	r20, r20
    2cea:	55 1f       	adc	r21, r21
    2cec:	66 1f       	adc	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	8a 95       	dec	r24
    2cf2:	d1 f7       	brne	.-12     	; 0x2ce8 <__unpack_f+0xd4>
    2cf4:	70 64       	ori	r23, 0x40	; 64
    2cf6:	14 96       	adiw	r26, 0x04	; 4
    2cf8:	4d 93       	st	X+, r20
    2cfa:	5d 93       	st	X+, r21
    2cfc:	6d 93       	st	X+, r22
    2cfe:	7c 93       	st	X, r23
    2d00:	17 97       	sbiw	r26, 0x07	; 7
    2d02:	08 95       	ret

00002d04 <__fpcmp_parts_f>:
    2d04:	1f 93       	push	r17
    2d06:	dc 01       	movw	r26, r24
    2d08:	fb 01       	movw	r30, r22
    2d0a:	9c 91       	ld	r25, X
    2d0c:	92 30       	cpi	r25, 0x02	; 2
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <__fpcmp_parts_f+0xe>
    2d10:	47 c0       	rjmp	.+142    	; 0x2da0 <__fpcmp_parts_f+0x9c>
    2d12:	80 81       	ld	r24, Z
    2d14:	82 30       	cpi	r24, 0x02	; 2
    2d16:	08 f4       	brcc	.+2      	; 0x2d1a <__fpcmp_parts_f+0x16>
    2d18:	43 c0       	rjmp	.+134    	; 0x2da0 <__fpcmp_parts_f+0x9c>
    2d1a:	94 30       	cpi	r25, 0x04	; 4
    2d1c:	51 f4       	brne	.+20     	; 0x2d32 <__fpcmp_parts_f+0x2e>
    2d1e:	11 96       	adiw	r26, 0x01	; 1
    2d20:	1c 91       	ld	r17, X
    2d22:	84 30       	cpi	r24, 0x04	; 4
    2d24:	99 f5       	brne	.+102    	; 0x2d8c <__fpcmp_parts_f+0x88>
    2d26:	81 81       	ldd	r24, Z+1	; 0x01
    2d28:	68 2f       	mov	r22, r24
    2d2a:	70 e0       	ldi	r23, 0x00	; 0
    2d2c:	61 1b       	sub	r22, r17
    2d2e:	71 09       	sbc	r23, r1
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <__fpcmp_parts_f+0xac>
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	21 f0       	breq	.+8      	; 0x2d3e <__fpcmp_parts_f+0x3a>
    2d36:	92 30       	cpi	r25, 0x02	; 2
    2d38:	31 f4       	brne	.+12     	; 0x2d46 <__fpcmp_parts_f+0x42>
    2d3a:	82 30       	cpi	r24, 0x02	; 2
    2d3c:	b9 f1       	breq	.+110    	; 0x2dac <__fpcmp_parts_f+0xa8>
    2d3e:	81 81       	ldd	r24, Z+1	; 0x01
    2d40:	88 23       	and	r24, r24
    2d42:	89 f1       	breq	.+98     	; 0x2da6 <__fpcmp_parts_f+0xa2>
    2d44:	2d c0       	rjmp	.+90     	; 0x2da0 <__fpcmp_parts_f+0x9c>
    2d46:	11 96       	adiw	r26, 0x01	; 1
    2d48:	1c 91       	ld	r17, X
    2d4a:	11 97       	sbiw	r26, 0x01	; 1
    2d4c:	82 30       	cpi	r24, 0x02	; 2
    2d4e:	f1 f0       	breq	.+60     	; 0x2d8c <__fpcmp_parts_f+0x88>
    2d50:	81 81       	ldd	r24, Z+1	; 0x01
    2d52:	18 17       	cp	r17, r24
    2d54:	d9 f4       	brne	.+54     	; 0x2d8c <__fpcmp_parts_f+0x88>
    2d56:	12 96       	adiw	r26, 0x02	; 2
    2d58:	2d 91       	ld	r18, X+
    2d5a:	3c 91       	ld	r19, X
    2d5c:	13 97       	sbiw	r26, 0x03	; 3
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	82 17       	cp	r24, r18
    2d64:	93 07       	cpc	r25, r19
    2d66:	94 f0       	brlt	.+36     	; 0x2d8c <__fpcmp_parts_f+0x88>
    2d68:	28 17       	cp	r18, r24
    2d6a:	39 07       	cpc	r19, r25
    2d6c:	bc f0       	brlt	.+46     	; 0x2d9c <__fpcmp_parts_f+0x98>
    2d6e:	14 96       	adiw	r26, 0x04	; 4
    2d70:	8d 91       	ld	r24, X+
    2d72:	9d 91       	ld	r25, X+
    2d74:	0d 90       	ld	r0, X+
    2d76:	bc 91       	ld	r27, X
    2d78:	a0 2d       	mov	r26, r0
    2d7a:	24 81       	ldd	r18, Z+4	; 0x04
    2d7c:	35 81       	ldd	r19, Z+5	; 0x05
    2d7e:	46 81       	ldd	r20, Z+6	; 0x06
    2d80:	57 81       	ldd	r21, Z+7	; 0x07
    2d82:	28 17       	cp	r18, r24
    2d84:	39 07       	cpc	r19, r25
    2d86:	4a 07       	cpc	r20, r26
    2d88:	5b 07       	cpc	r21, r27
    2d8a:	18 f4       	brcc	.+6      	; 0x2d92 <__fpcmp_parts_f+0x8e>
    2d8c:	11 23       	and	r17, r17
    2d8e:	41 f0       	breq	.+16     	; 0x2da0 <__fpcmp_parts_f+0x9c>
    2d90:	0a c0       	rjmp	.+20     	; 0x2da6 <__fpcmp_parts_f+0xa2>
    2d92:	82 17       	cp	r24, r18
    2d94:	93 07       	cpc	r25, r19
    2d96:	a4 07       	cpc	r26, r20
    2d98:	b5 07       	cpc	r27, r21
    2d9a:	40 f4       	brcc	.+16     	; 0x2dac <__fpcmp_parts_f+0xa8>
    2d9c:	11 23       	and	r17, r17
    2d9e:	19 f0       	breq	.+6      	; 0x2da6 <__fpcmp_parts_f+0xa2>
    2da0:	61 e0       	ldi	r22, 0x01	; 1
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	05 c0       	rjmp	.+10     	; 0x2db0 <__fpcmp_parts_f+0xac>
    2da6:	6f ef       	ldi	r22, 0xFF	; 255
    2da8:	7f ef       	ldi	r23, 0xFF	; 255
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <__fpcmp_parts_f+0xac>
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	cb 01       	movw	r24, r22
    2db2:	1f 91       	pop	r17
    2db4:	08 95       	ret

00002db6 <__prologue_saves__>:
    2db6:	2f 92       	push	r2
    2db8:	3f 92       	push	r3
    2dba:	4f 92       	push	r4
    2dbc:	5f 92       	push	r5
    2dbe:	6f 92       	push	r6
    2dc0:	7f 92       	push	r7
    2dc2:	8f 92       	push	r8
    2dc4:	9f 92       	push	r9
    2dc6:	af 92       	push	r10
    2dc8:	bf 92       	push	r11
    2dca:	cf 92       	push	r12
    2dcc:	df 92       	push	r13
    2dce:	ef 92       	push	r14
    2dd0:	ff 92       	push	r15
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	ca 1b       	sub	r28, r26
    2de0:	db 0b       	sbc	r29, r27
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	09 94       	ijmp

00002dee <__epilogue_restores__>:
    2dee:	2a 88       	ldd	r2, Y+18	; 0x12
    2df0:	39 88       	ldd	r3, Y+17	; 0x11
    2df2:	48 88       	ldd	r4, Y+16	; 0x10
    2df4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e00:	b9 84       	ldd	r11, Y+9	; 0x09
    2e02:	c8 84       	ldd	r12, Y+8	; 0x08
    2e04:	df 80       	ldd	r13, Y+7	; 0x07
    2e06:	ee 80       	ldd	r14, Y+6	; 0x06
    2e08:	fd 80       	ldd	r15, Y+5	; 0x05
    2e0a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e0c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e0e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e10:	b9 81       	ldd	r27, Y+1	; 0x01
    2e12:	ce 0f       	add	r28, r30
    2e14:	d1 1d       	adc	r29, r1
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	ed 01       	movw	r28, r26
    2e22:	08 95       	ret

00002e24 <_exit>:
    2e24:	f8 94       	cli

00002e26 <__stop_program>:
    2e26:	ff cf       	rjmp	.-2      	; 0x2e26 <__stop_program>
